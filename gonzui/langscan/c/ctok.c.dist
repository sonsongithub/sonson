#line 2 "ctok.c"

#line 4 "ctok.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int langscan_c_lex_lex_init (yyscan_t* scanner);
/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE langscan_c_lex_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via langscan_c_lex_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

void langscan_c_lex_restart (FILE *input_file ,yyscan_t yyscanner );
void langscan_c_lex__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE langscan_c_lex__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void langscan_c_lex__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void langscan_c_lex__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void langscan_c_lex_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void langscan_c_lex_pop_buffer_state (yyscan_t yyscanner );

static void langscan_c_lex_ensure_buffer_stack (yyscan_t yyscanner );
static void langscan_c_lex__load_buffer_state (yyscan_t yyscanner );
static void langscan_c_lex__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER langscan_c_lex__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE langscan_c_lex__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE langscan_c_lex__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE langscan_c_lex__scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

/* %endif */

void *langscan_c_lex_alloc (yy_size_t ,yyscan_t yyscanner );
void *langscan_c_lex_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void langscan_c_lex_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer langscan_c_lex__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        langscan_c_lex_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            langscan_c_lex__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        langscan_c_lex_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            langscan_c_lex__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define langscan_c_lex_wrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 25
#define YY_END_OF_BUFFER 26
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[792] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       26,   24,   14,   15,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   19,   20,   24,   24,   24,   23,
       24,   23,   23,   24,   14,    1,    3,   24,    5,    5,
        5,    6,    5,    5,    5,    9,    8,    8,    8,   14,
       24,    0,   17,    0,    0,    0,   22,    0,   16,   22,
       19,    0,   19,    0,   20,   20,   24,   24,   23,   23,
       23,   14,    1,    2,    0,    0,    5,    4,    5,    5,
        5,    5,    5,    0,    0,    8,    7,    8,    8,    0,
        0,    0,   18,    0,    0,    0,    0,   22,    0,    0,

       16,   22,   21,   23,   23,    0,    0,    5,    5,    5,
        5,    0,    0,    8,    8,    0,    0,    0,    0,    0,
        0,   22,    0,   16,   21,   23,   23,    0,    0,    0,
        0,    0,    4,    5,    5,    5,    5,    0,    0,    0,
        0,    0,    7,    8,    8,    0,   23,   23,    0,    0,
        0,    5,    5,    5,    5,    0,    0,    0,    8,    8,
        0,    0,   23,    0,    0,    0,    0,    0,    0,    4,
        0,    0,    5,    5,    0,    0,    0,    0,    0,    0,
        7,    0,    0,    8,    0,   12,   10,    0,    0,    0,
        0,    0,    4,    0,    0,    0,    0,    4,    0,    0,

        0,    0,    4,    4,    4,    0,    0,    0,    0,    0,
        7,    0,    0,    0,    0,    7,    0,    0,    0,    0,
        7,    0,    0,    0,    0,    0,    0,    0,   12,   10,
        0,   13,   11,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    0,    4,    0,    0,    0,    0,    4,    0,
        0,    0,    0,    0,    0,    0,    4,    4,    4,    0,
        0,    4,    4,    4,    0,    0,    0,    0,    0,    0,
        0,    0,    7,    0,    7,    0,    0,    0,    0,    7,
        0,    0,    0,    0,    0,    0,    0,    7,   10,    0,
        0,    7,    0,    0,    0,    0,    0,    0,   13,   11,

        0,    0,    0,    0,    0,    0,    0,    4,    0,    0,
        4,    0,    0,   12,   10,    0,    0,    0,    4,    4,
        4,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    4,    4,    0,    0,    0,    0,    0,    0,
        0,    7,    0,    0,    7,    0,    0,   12,   10,    0,
        0,    0,    7,   10,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    7,   11,    0,    0,    0,    0,
        0,   12,   10,    0,    0,    0,    0,    0,    0,    0,
        0,    4,    4,    4,    0,    0,   13,   11,    0,    0,
        0,    4,    4,    4,    0,    0,    0,    0,    0,    0,

       12,   10,    0,    0,    0,    0,    0,    0,    0,    0,
        7,   10,    0,    0,   13,   11,    0,    0,    0,    7,
       11,    0,    0,    0,    0,    0,   12,   10,    0,    0,
        0,    0,    4,    4,    4,    0,    4,    4,    4,    0,
        0,    0,    0,    4,    4,    4,    0,    0,    0,   13,
       11,    0,    0,    0,    0,    0,    0,    0,    0,    4,
        4,    4,    0,   12,   10,    0,    0,    0,    0,    7,
       10,    0,    7,    0,    0,    0,    0,    7,   10,    0,
        0,    0,   13,   11,    0,    0,    0,    0,    0,    0,
        0,    0,    7,   11,    0,    0,    0,    4,    4,    4,

        0,    0,    0,    0,    0,    0,    0,    0,    4,    4,
        4,    0,    4,    4,    4,    0,    0,    0,    0,    4,
        4,    4,    0,   13,   11,    0,    0,    0,    0,    4,
        4,    4,    0,    4,    4,    4,    0,    0,    0,    0,
        4,    4,    4,    0,    0,    0,    0,    0,    7,   10,
        0,    0,    0,    0,    0,    0,    0,    0,    7,   10,
        0,    7,    0,    0,    0,    0,    7,   10,    0,   13,
       11,    0,    0,    0,    0,    7,   11,    0,    7,    0,
        0,    0,    0,    7,   11,    0,    0,    0,    0,    0,
        4,    4,    4,    0,    0,    0,    4,    4,    4,    0,

       12,   10,    0,    0,    0,    0,    0,    0,    4,    4,
        4,    0,    0,    4,    4,    4,    0,    0,    0,    4,
        4,    4,    0,    0,    0,    0,    0,    0,    0,    0,
        4,    4,    4,    0,    4,    4,    4,    0,    0,    0,
        0,    4,    4,    4,    0,    0,    0,    7,   10,    0,
        0,    0,    7,   10,    0,   12,   10,    0,    0,    0,
        0,    0,    0,    7,   10,    0,    0,    7,   10,    0,
        0,    0,    7,   11,    0,    0,    0,    0,    0,    0,
        0,    0,    7,   11,    0,    7,    0,    0,    0,    0,
        7,   11,    0,    0,    0,    0,    4,    4,    4,   12,

       10,    0,    0,    0,    0,    0,    4,    4,    4,    0,
        0,    0,    4,    4,    4,    0,   13,   11,    0,    0,
        0,    0,    0,    0,    4,    4,    4,    0,    0,    4,
        4,    4,    0,    0,    0,    0,    7,   10,   12,    0,
        0,    0,    0,    0,    7,   11,    0,    0,    0,    7,
       11,    0,   13,   11,    0,    0,    0,    0,    0,    0,
        7,   11,    0,    0,    7,   11,    0,    0,    0,    0,
        0,    4,    4,    4,   13,   11,    0,    0,    0,    0,
        0,    0,    0,    7,   11,   13,    0,    0,    0,    0,
        0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    8,    9,   10,    1,
        1,   11,   12,    1,   13,   14,   15,   16,   17,   17,
       17,   18,   18,   18,   18,   19,   19,   20,   21,   22,
       23,   24,   25,    1,   26,   26,   26,   26,   27,   28,
       29,   29,   29,   29,   29,   30,   29,   29,   29,   29,
       29,   29,   29,   29,   31,   29,   29,   32,   29,   29,
        1,   33,    1,   34,   29,    1,   35,   36,   37,   36,

       38,   39,   40,   40,   40,   40,   40,   41,   40,   40,
       40,   40,   40,   42,   43,   44,   45,   40,   40,   46,
       40,   40,   47,   48,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[49] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    1,    1,    5,
        1,    1,    1,    1,    2,    6,    6,    6,    7,    8,
        2,    1,    1,    1,    4,    7,    7,    7,    9,    9,
        9,    9,    4,    1,    6,    6,    6,    6,    6,   10,
       10,   10,   10,   10,   10,   10,    8,    1
    } ;

static yyconst flex_int16_t yy_base[958] =
    {   0,
        0,   47,   47,   49,   57,   51,   79,   53,  105,   55,
     1225, 5966,   57, 5966, 1185,   57, 1184,   55, 1170, 1179,
       53,  115,   50,  141,  151,  184,   48, 1173,   49,    0,
     1166, 1142, 1138,  106,  151, 5966, 5966, 1175,  157,  191,
       33, 5966,    0, 1136, 1127, 5966,  159,  205,  184,   77,
     5966,  124, 5966,  172, 1153,  205,  236, 1148,    0,  217,
       81,  223,  186,    0,    0,  217, 1134, 1132,    0, 1117,
     1108,  169, 5966, 5966,  258,  164, 1108, 5966,  150,  168,
        0, 1111, 1103,  265,  234,  267, 5966,  269,  291,  281,
      285,  328, 5966,  299,  303, 1130,  310, 5966, 1128,  270,

        0,    0,  294, 1086, 1071, 1092,  328,  216,  251, 1054,
     1051, 1068,  338,  355,  366,  356,  250,  396,  361,    0,
      366,  420, 1067, 5966,  360, 1029, 1034, 1054,  296,  405,
      425,  453,  455,  267,  295, 1021, 1021, 1046,  327,  439,
      463,  477,  480,  484,  488, 1040,  391, 1000, 1026,  508,
      511,  505,  122,  394,  986, 1005,  532,  539,  491,  515,
      203,  377,  401, 1003,  546,  560,  562,  576,  583,  597,
      599,  384,  613,  415,  989,  622,  624,  638,  645,  659,
      661,  666,  432,  675,  339, 5966, 5966,  988,  450,  430,
      452,  470,  987,  682,  689,  696,  703,  717,  719,  742,

      739,  668,  468, 5966, 5966,  982,  753,  767,  522,  529,
      975,  769,  790,  792,  795,  806,  817,  820,  822,  815,
     5966,  968,  831,  842,  541,  954,  557,  548,  585,  589,
      584, 5966, 5966,  947,  608,  559,  845,  856,  870,  884,
      891,  898,  623,  940,  905,  912,  919,  926,  933,  654,
      940,  886,  656,  947,  954,  961,  968,  975,  982,  989,
      996,  665, 5966, 5966,  885, 1003,  716, 1010, 1017, 1024,
     1031, 1038, 1045,  736,  877, 1052, 1059, 1066, 1073, 1080,
      714, 1083,  872,  737, 1087, 1090, 1104, 1097, 1107, 1111,
     1106, 5966,  871, 1121,  868,  859,  764,  755,  877, 1117,

      850, 1145, 1159, 1170, 1173, 1184, 1198, 1212,  842,  766,
      831,  828, 1120,  829,  818, 1209, 1219, 1233, 1240, 1247,
     1249,  807, 1270, 1286,  863, 1290,  804,  839, 1300, 1310,
     1321, 1324, 1346, 1349,  801, 1370, 1373, 1384, 1387, 1398,
     1401, 1412,  793,  840,  788, 1122, 1293,  785,  780, 1415,
     1422, 1429, 1195, 1426,  774, 1443, 1446, 1236, 1450,  772,
      853, 1453, 1457, 1477, 1480, 1484,  767,  756, 1500, 1514,
     1288,  754,  738, 1530, 1537,  735, 1551, 1553, 1567, 1588,
     1590, 1604, 1618, 1625, 1307, 1335,  722,  715, 1628, 1639,
     1653, 1664, 1667, 1674,  697, 1688, 1695, 1507, 1702, 1308,

      684,  683, 1716, 1723,  677, 1730, 1737, 1744, 1751, 1758,
     1765, 1772, 1332, 1565,  662,  647, 1779, 1786, 1793, 1800,
     1807,  646, 1814, 1821,  641, 1502,  640,  639, 1828, 1835,
     1842, 1849, 1856, 1863, 1870, 1611, 1636,  631,  611, 1877,
     1884, 1891, 1898, 1905, 1912, 1919, 1926, 1933, 1660,  610,
      602, 1940, 1947,  579, 1954, 1961, 1968, 1975, 1982, 1989,
     1996, 2003, 1681,  578,  573, 2010, 2017, 2024, 2031, 2038,
     2045, 1709,  565, 2052, 2059, 2066, 2073, 2080, 2087, 2094,
     2101, 2089,  534,  528, 2122, 2129,  527, 2136, 2143, 2150,
     2157, 2164, 2171, 2178, 2185, 2192, 2199, 2206, 2213, 2220,

     2227, 2234, 2108, 2241, 2248, 2255, 2262, 2269, 2276, 2283,
     2290, 2297, 2296,  513,  510, 2311, 2318, 2325, 2339, 2346,
     2353, 2360, 2304,  505,  493, 2367, 2374, 2381, 2388, 2395,
     2402, 2409, 2416, 2415,  485,  458, 2430, 2437, 2444, 2458,
     2465, 2472, 2479, 2486, 2493, 2500, 2507, 2514, 2521, 2528,
     2535, 2542, 2423, 2549, 2556, 2563, 2570, 2577, 2584, 2591,
     2586,  451, 2611, 2625, 2632, 2639, 2646, 2653, 2597,  438,
      433, 2660, 2667, 2674, 2681, 2688, 2695, 2604,  418, 2702,
     2709, 2716, 2723, 2730, 2737, 2744, 2751, 2758, 2765, 2772,
     2779, 2786, 2793, 2800, 2807, 2814, 2821, 2828, 2835, 2618,

      410,  408, 2842, 2849, 2856, 2863, 2870, 2877, 2884, 2891,
     2898, 2904, 2905, 2911,  399,  391, 2926, 2933, 2954, 2957,
     2968, 2979, 2982, 3003, 2919, 3010, 3017, 3031, 3033, 3056,
     3070, 3072, 3086, 2996, 2975,  389,  369, 3093, 3107, 3109,
     3123, 3144, 3146, 3160, 3171, 3174, 3185, 3199, 3201, 3222,
     3224, 3227, 3238, 3249, 3058,  341,  340, 3252, 3273, 3275,
     3280, 3295, 3300, 3302, 3322, 3121, 3297,  339,  326, 3337,
     3351, 3353, 3368, 3375, 3390, 3392, 3320, 3406, 3413, 3420,
     3427, 3441, 3443, 3448, 3450,  289, 3470, 3481, 3497, 3504,
     3511, 3518, 3532, 3534, 3557, 3571, 3573, 3587, 3594,  284,

      278, 3608, 3610, 3624, 3645, 3647, 3661, 3675, 3682, 3696,
     3698, 3712, 3733, 3735, 3749, 3158,  265,  254, 3763, 3770,
     3784, 3786, 3800, 3821, 3823, 3837, 3851, 3187, 3483, 3225,
      233,  232, 3848, 3862, 3876, 3878, 3899, 3901,  219, 3915,
     3926, 3929, 3931, 3946, 3953, 3968, 3979, 3984, 3995, 4000,
     4017, 3245,  208,  202, 4022, 4033, 4038, 4049, 4060, 4063,
     4080, 4087, 3298, 3622,  184,  173, 4101, 4103, 4117, 4138,
     4140, 4154, 4168, 4175,  101,   80, 4189, 4191, 4205, 4216,
     4230, 4232, 4246, 4253, 4267,   64, 4269, 4283, 4294, 4297,
     5966, 4344, 4354, 4359, 4368, 4373, 4382, 4390, 4398, 4408,

     4418, 4423, 4426, 4433, 4443, 4453, 4463, 4473, 4478, 4485,
     4495, 4505, 4515, 4525, 4535, 4545, 4555, 4565, 4575, 4585,
     4595, 4605, 4615, 4625, 4635, 4645, 4655, 4665, 4675, 4685,
     4695, 4705, 4715, 4725, 4735, 4745, 4755, 4765, 4775, 4785,
     4795, 4805, 4815, 4825, 4835, 4845, 4855, 4865, 4875, 4885,
     4895, 4905, 4915, 4925, 4935, 4945, 4955, 4965, 4975, 4985,
     4995, 5005, 5015, 5025, 5035, 5045, 5055, 5065, 5075, 5085,
     5095, 5105, 5115, 5125, 5135, 5145, 5155, 5165, 5175, 5185,
     5195, 5205, 5215, 5225, 5235, 5245, 5255, 5265, 5275, 5285,
     5295, 5305, 5315, 5325, 5335, 5345, 5355, 5365, 5375, 5385,

     5395, 5405, 5415, 5425, 5435, 5445, 5455, 5465, 5475, 5485,
     5495, 5505, 5515, 5525, 5535, 5545, 5555, 5565, 5575, 5585,
     5595, 5605, 5615, 5625, 5635, 5645, 5655, 5665, 5675, 5685,
     5695, 5705, 5715, 5725, 5735, 5745, 5755, 5765, 5775, 5785,
     5795, 5805, 5815, 5825, 5835, 5845, 5855, 5865, 5875, 5885,
     5895, 5905, 5915, 5925, 5935, 5945, 5955
    } ;

static yyconst flex_int16_t yy_def[958] =
    {   0,
      791,    1,    1,    1,    1,    5,    5,    7,    1,    9,
      791,  791,  791,  791,  791,  792,  791,  791,  793,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  794,
      791,  794,  794,  791,  791,  791,  791,  791,  795,  795,
       40,  791,  796,  796,  796,  791,  797,  797,  797,  791,
      791,  792,  791,  798,  791,  799,  791,  800,  801,   57,
       25,  791,  791,  802,   26,  791,  791,  791,  794,  794,
      794,  791,  791,  791,  791,  791,   40,  791,   40,   40,
      796,  796,  796,  791,  791,  797,  791,  797,  797,  792,
      792,  792,  791,  791,  791,  803,  791,  791,  800,  804,

      801,   60,  802,  794,  794,  805,  806,   40,   40,  796,
      796,  807,  808,  797,  797,  792,  792,   92,  791,  809,
      791,  791,  810,  791,  791,  794,  794,  805,  811,  806,
      806,  806,  806,   40,   40,  796,  796,  807,  812,  808,
      808,  808,  808,  797,  797,  810,  794,  794,  813,  814,
      806,   40,   40,  796,  796,  815,  816,  808,  797,  797,
      817,  791,  794,  813,  814,  814,  805,  818,  814,  814,
      817,  791,   40,  796,  815,  816,  816,  807,  819,  816,
      816,  817,  791,  797,  817,  791,  791,  820,  821,  822,
      791,  805,  805,  823,  823,  813,  806,  823,  824,  814,

      817,  817,  817,  791,  791,  825,  826,  822,  791,  807,
      807,  827,  827,  815,  808,  827,  828,  816,  817,  817,
      791,  829,  830,  822,  791,  820,  831,  821,  821,  821,
      822,  791,  791,  832,  833,  834,  814,  823,  823,  813,
      823,  823,  813,  813,  835,  835,  836,  814,  835,  837,
      838,  825,  839,  826,  826,  826,  826,  826,  826,  822,
      822,  822,  791,  791,  840,  841,  842,  816,  827,  827,
      815,  827,  827,  815,  815,  843,  843,  844,  816,  843,
      845,  846,  829,  847,  830,  830,  830,  830,  830,  822,
      822,  791,  848,  849,  850,  832,  851,  833,  833,  833,

      836,  823,  823,  835,  835,  836,  835,  835,  836,  836,
      836,  837,  852,  853,  853,  838,  838,  838,  838,  854,
      854,  855,  856,  826,  857,  858,  840,  859,  841,  841,
      841,  841,  841,  841,  844,  827,  827,  843,  843,  844,
      843,  843,  844,  844,  844,  845,  860,  861,  861,  846,
      846,  846,  862,  862,  863,  864,  830,  865,  866,  848,
      867,  849,  849,  849,  849,  849,  850,  868,  835,  835,
      869,  870,  870,  871,  838,  855,  856,  856,  837,  872,
      856,  856,  856,  856,  857,  873,  853,  853,  858,  858,
      858,  858,  854,  854,  874,  875,  841,  843,  843,  876,

      877,  877,  878,  846,  863,  864,  864,  845,  879,  864,
      864,  864,  865,  880,  861,  861,  866,  866,  866,  862,
      862,  881,  882,  849,  868,  869,  870,  870,  871,  871,
      883,  871,  871,  884,  884,  837,  837,  853,  853,  885,
      885,  869,  886,  885,  885,  885,  887,  856,  888,  870,
      870,  889,  858,  874,  875,  875,  857,  890,  875,  875,
      875,  875,  876,  877,  877,  878,  878,  891,  878,  892,
      892,  845,  861,  893,  893,  876,  894,  893,  893,  895,
      864,  896,  877,  877,  897,  866,  881,  882,  882,  865,
      898,  882,  882,  882,  899,  899,  900,  899,  901,  901,

      902,  871,  903,  871,  885,  885,  869,  885,  885,  885,
      885,  869,  869,  870,  870,  904,  904,  905,  856,  904,
      904,  904,  888,  870,  870,  889,  889,  906,  889,  889,
      907,  907,  857,  857,  908,  908,  909,  909,  888,  910,
      909,  909,  909,  911,  875,  912,  912,  913,  914,  914,
      915,  916,  917,  916,  893,  893,  876,  893,  893,  893,
      876,  877,  918,  918,  919,  864,  918,  918,  896,  877,
      877,  897,  897,  920,  897,  921,  921,  865,  922,  923,
      923,  896,  924,  923,  923,  925,  926,  927,  927,  927,
      927,  928,  928,  929,  929,  930,  929,  931,  931,  905,

      932,  932,  933,  927,  934,  934,  905,  934,  934,  934,
      934,  905,  905,  905,  932,  932,  935,  935,  936,  935,
      928,  928,  937,  938,  939,  938,  909,  909,  888,  909,
      909,  909,  909,  888,  888,  940,  940,  941,  941,  942,
      943,  941,  941,  941,  944,  944,  944,  914,  914,  945,
      945,  916,  946,  946,  919,  947,  947,  948,  944,  918,
      918,  919,  918,  918,  918,  919,  919,  947,  947,  949,
      949,  950,  914,  914,  951,  897,  952,  897,  923,  923,
      896,  923,  923,  923,  896,  953,  954,  954,  955,  926,
      954,  954,  927,  929,  929,  929,  929,  931,  931,  932,

      932,  934,  929,  935,  935,  935,  935,  928,  928,  956,
      956,  938,  956,  931,  931,  942,  932,  932,  909,  935,
      941,  941,  942,  941,  941,  941,  941,  942,  942,  942,
      932,  932,  944,  945,  945,  945,  946,  946,  947,  918,
      945,  949,  949,  949,  914,  914,  957,  957,  897,  946,
      946,  955,  947,  947,  923,  949,  954,  954,  955,  954,
      954,  954,  955,  955,  947,  947,  929,  935,  956,  956,
      956,  956,  931,  931,  932,  932,  941,  956,  945,  949,
      957,  957,  957,  946,  946,  947,  954,  957,  956,  957,
        0,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791
    } ;

static yyconst flex_int16_t yy_nxt[6015] =
    {   0,
       12,   13,   14,   13,   15,   16,   12,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   26,   26,   12,
       12,   27,   28,   29,   12,   30,   30,   30,   30,   30,
       30,   30,   12,   31,   30,   30,   32,   30,   30,   30,
       30,   30,   33,   30,   30,   30,   12,   34,   35,   37,
       35,   37,   35,   36,   35,   36,   35,   36,   50,   36,
       50,   36,   53,   51,   51,   57,   57,   57,   57,   67,
       51,   51,   68,   77,  139,   51,   80,   51,   50,   38,
       50,   38,   39,   39,   39,   39,   39,   39,   39,   54,
      129,   39,   39,   40,   39,   39,   39,   39,   39,   41,

       39,   39,   39,   42,   43,   43,   43,   43,   43,   43,
       43,  129,  791,   43,   43,   44,   43,   43,   43,   43,
       43,   45,   43,   43,   43,   46,  791,   51,   51,   53,
       47,   47,   47,   47,   47,   47,   47,   51,   51,   47,
       47,   48,   47,   47,   47,   47,   47,   49,   47,   47,
       47,   58,   72,   51,   50,   59,   54,   73,   75,   75,
       84,   84,   77,   51,   60,  173,   61,   61,   61,   62,
       72,   76,   50,   85,  106,   73,   78,   78,  107,   87,
       63,   63,   64,  139,  108,   84,   84,   90,   90,   91,
       77,   63,   75,   75,  139,   63,   64,   60,   85,   65,

       65,   65,   65,   78,   87,   76,   84,   84,   77,  109,
       78,   78,  139,   66,   66,   63,   63,   92,  139,   85,
       94,   94,   95,  186,   66,   87,   63,   89,   66,  139,
       63,   79,  102,  102,  102,  102,   60,   78,   62,   62,
       62,   62,  129,  129,  112,   88,   66,   66,  113,  187,
       96,   57,   57,   57,   57,   53,   77,   66,  134,   75,
       75,   66,   97,   98,  129,   98,   84,   84,   84,   84,
       84,   84,   76,   97,   98,  129,   98,   78,   78,   85,
      100,   85,   54,   85,  124,   87,   53,   87,  129,   87,
       53,   77,   84,   84,  129,  135,  116,  116,  116,  139,

      117,  117,  117,  114,   78,   85,  129,   77,   93,  152,
       75,   87,   93,   54,  119,  119,  119,   54,   55,   55,
       55,  121,  121,  125,  125,  122,  122,  122,  122,  131,
       75,  153,  115,   53,  125,   77,  139,  139,  125,  141,
       84,   84,  132,  118,  118,  118,  118,  133,  133,  139,
      139,  139,  142,  118,  118,  118,   84,   84,  143,  186,
       54,   53,  118,  118,  118,  118,  118,   84,   84,   85,
       93,  117,  117,  117,  133,   87,   55,   55,   55,  129,
       85,  122,  122,  122,  122,  187,   87,  188,   54,  125,
      125,  189,  161,  161,  206,  161,  161,  144,  207,  129,

      125,  129,  190,  190,  125,  162,  131,   75,  162,  129,
      145,  117,  117,  117,  117,  191,  190,  190,  129,  132,
      129,  117,  117,  117,  133,  133,  131,   75,  139,  191,
      117,  117,  117,  117,  117,  122,  122,  122,  122,  132,
      141,   84,  222,  139,  133,  133,  223,   98,  139,   98,
      232,  133,  185,  142,  131,   75,  131,   75,   98,  143,
       98,  139,  234,  150,  141,   84,  235,  151,  129,  132,
      229,  133,  133,  133,  133,  133,  233,  142,  141,   84,
      236,  141,   84,  143,  237,   84,   84,  157,  186,   84,
       84,  158,  182,  182,  142,  129,  230,  143,   85,  133,

      143,  133,   85,  129,   87,  183,  171,  171,   87,  166,
      167,   87,  131,   75,  187,  129,   84,   84,  168,  172,
      129,  150,  169,  129,  160,  151,  159,  170,  170,   85,
      133,  133,  265,  177,  178,   87,  266,  361,  139,  267,
      141,   84,  179,  268,  139,   77,  180,  166,  167,  157,
      185,  293,  181,  158,  170,  294,  168,  133,  184,  143,
      169,  166,  167,  167,  167,  170,  170,  227,  229,  129,
      168,  161,  129,  167,  169,  139,  192,  195,  196,  170,
      170,  193,  193,  139,  166,  167,  168,  185,  139,  328,
      197,  185,  170,  199,  230,  198,  198,  200,  166,  167,

      201,  201,  170,  170,  232,  229,  170,  168,  193,  229,
      231,  169,  129,  202,  208,  208,  170,  170,  203,  204,
      129,  129,  198,  177,  178,  177,  178,  209,  299,  170,
      233,  230,  179,  236,  179,  230,  180,  303,  180,  178,
      178,  129,  181,  170,  181,  205,  213,  214,  139,  129,
      129,  297,  210,   77,  300,  179,  361,  139,  211,  215,
      177,  178,  177,  178,  313,  216,  253,  219,  219,  217,
      171,  179,  139,  218,  314,  180,  224,  224,  250,  181,
      220,  181,  251,  239,  240,  232,  221,  284,  186,  225,
      239,  240,  168,  139,  139,   87,  241,  240,  240,  168,

      315,  242,  242,  241,  131,   75,  129,  328,  242,  242,
      243,  233,  187,  150,  187,  244,  244,  151,  239,  240,
      246,  247,  133,  133,  347,  129,  139,  168,  242,  168,
      178,  241,  129,  248,  348,  242,  242,  242,  249,  249,
      201,  201,  244,  166,  167,  253,  267,  284,  129,  133,
      337,  182,  199,  202,  255,  201,  200,  231,  203,  204,
      349,  170,  170,  242,  129,  249,  297,  256,  260,  260,
      270,  271,  257,  258,  297,  299,  236,  227,  190,  179,
      370,  261,  361,  272,  284,  205,  262,  263,  170,  273,
      139,  270,  271,  271,  271,  139,  141,   84,  139,  259,

      179,  300,  139,  139,  272,  157,  274,  270,  271,  158,
      273,  139,  275,  264,  328,  143,  179,  253,  277,  278,
      272,  177,  178,  219,  219,  281,  273,  179,  129,  282,
      217,  279,  286,  219,  218,  186,  220,  280,  313,  129,
      181,  129,  221,  290,  290,  287,  166,  167,  314,  328,
      267,  288,  129,  208,  399,  168,  291,  239,  240,  169,
      129,  187,  292,  361,  170,  170,  168,  224,  187,  297,
      241,  239,  240,  386,  315,  242,  242,  289,  227,  231,
      168,  361,  284,  387,  241,  240,  240,  139,  233,  242,
      242,  170,  239,  240,  129,  328,  253,  299,  243,  239,

      240,  199,  242,  244,  244,  302,  305,  306,  168,  388,
      242,  242,  241,  305,  306,  168,  242,  242,  242,  307,
      306,  306,  168,  300,  308,  308,  307,  166,  167,  129,
      244,  308,  308,  310,  305,  306,  199,  242,  311,  311,
      200,  317,  201,  168,  242,  170,  170,  307,  255,  201,
      129,  308,  308,  308,  318,  255,  201,  297,  308,  319,
      320,  256,  255,  201,  227,  311,  257,  258,  256,  255,
      201,  323,  170,  257,  258,  324,  255,  201,  284,  308,
      257,  258,  256,  255,  201,  139,  321,  257,  258,  256,
      260,  260,  253,  259,  257,  258,  256,  129,  227,  139,

      259,  257,  258,  261,  330,  260,  325,  259,  262,  263,
      326,  177,  178,  129,  259,  139,  232,  331,  270,  271,
      179,  259,  332,  333,  180,  270,  271,  179,  259,  174,
      181,  272,  271,  271,  179,  264,  129,  273,  272,  270,
      271,  139,  233,  163,  273,  274,  270,  271,  217,  334,
      100,  275,  336,  339,  340,  179,  139,  155,  273,  272,
      339,  340,  179,  154,  129,  273,  341,  340,  340,  179,
      148,  147,  342,  341,  177,  178,  139,  100,  139,  342,
      344,  339,  340,  217,  351,  219,  345,  218,  286,  219,
      179,  286,  219,  181,  341,  137,  136,  352,  286,  219,

      342,  287,  129,  353,  287,  286,  219,  288,  286,  219,
      288,  287,  290,  290,  356,  127,  358,  288,  357,  231,
      359,  287,  363,  290,  288,  291,  232,  288,  126,  354,
      313,  292,  347,  289,  201,  364,  289,  299,  100,   93,
      372,  365,  348,  289,  111,  110,  239,  240,   77,  105,
      289,  104,  233,  289,   51,  199,   51,  233,  100,  302,
      239,  240,   93,  300,  242,  242,  373,  366,  349,  168,
       83,  305,  306,  241,  305,  306,   82,   74,  242,  242,
      168,   71,   70,  168,  307,  306,  306,  307,   51,  308,
      308,  242,  308,  308,  129,   51,  141,   84,  310,  305,

      306,   51,   56,  311,  311,  242,   51,   51,  199,  142,
      317,  201,  369,  305,  306,  143,  308,  308,  308,  308,
      317,  201,  168,  318,  791,  791,  307,  791,  319,  320,
      311,  308,  308,  318,  317,  201,  791,  791,  319,  320,
      791,  317,  201,  374,  308,  791,  414,  375,  131,   75,
      131,   75,  319,  320,  318,  321,  415,  791,  308,  319,
      320,  132,  791,  132,  791,  321,  133,  133,  133,  133,
      791,  378,  379,  791,  791,  791,  791,  791,  791,  321,
      380,  791,  416,  791,  381,  791,  321,  255,  201,  382,
      383,  390,  260,  133,  791,  133,  323,  791,  313,  791,

      324,  330,  260,  347,  391,  257,  258,  219,  427,  392,
      393,  330,  260,  401,  331,  791,  384,  386,  347,  332,
      333,  791,  330,  260,  331,  330,  260,  387,  464,  332,
      333,  396,  259,  791,  428,  397,  394,  791,  331,  402,
      332,  333,  414,  332,  333,  386,  334,  330,  260,  260,
      330,  260,  415,  388,  465,  450,  334,  791,  791,  791,
      331,  791,  791,  331,  791,  332,  333,  334,  332,  333,
      334,  270,  271,  791,  270,  271,  791,  791,  416,  791,
      217,  451,  791,  179,  336,  339,  340,  272,  339,  340,
      273,  791,  334,  273,  179,  334,  791,  179,  341,  340,

      340,  341,  339,  340,  342,  791,  791,  342,  139,  791,
      791,  217,  344,  339,  340,  398,  351,  219,  345,  791,
      791,  342,  179,  351,  219,  791,  341,  141,   84,  352,
      351,  219,  342,  791,  791,  353,  352,  791,  791,  403,
      142,  791,  353,  404,  407,  408,  143,  286,  219,  353,
      791,  418,  290,  409,  363,  290,  356,  410,  363,  290,
      357,  354,  791,  411,  419,  791,  288,  364,  354,  791,
      420,  364,  791,  365,  791,  354,  791,  365,  363,  290,
      791,  363,  290,  791,  791,  363,  290,  423,  791,  412,
      791,  424,  289,  791,  364,  791,  421,  365,  364,  366,

      365,  305,  306,  366,  365,  791,  791,  791,  339,  340,
      199,  791,  313,  791,  369,  305,  306,  217,  791,  308,
      308,  398,  427,  366,  168,  791,  366,  342,  307,  791,
      366,  430,  379,  308,  308,  791,  791,  791,  317,  201,
      431,  791,  791,  791,  432,  791,  308,  374,  428,  433,
      434,  375,  378,  379,  378,  379,  319,  320,  791,  791,
      308,  380,  791,  380,  791,  381,  791,  381,  379,  379,
      382,  383,  382,  383,  791,  414,  435,  313,  791,  290,
      791,  436,  791,  321,  791,  483,  437,  438,  791,  441,
      442,  378,  379,  791,  791,  791,  791,  384,  380,  384,

      447,  791,  443,  791,  448,  378,  379,  444,  445,  382,
      383,  484,  791,  439,  380,  791,  791,  791,  381,  378,
      379,  503,  791,  382,  383,  504,  378,  379,  380,  390,
      260,  314,  381,  791,  446,  380,  384,  382,  383,  381,
      390,  260,  391,  791,  382,  383,  313,  392,  393,  791,
      384,  791,  791,  391,  390,  260,  314,  315,  392,  393,
      791,  791,  791,  452,  384,  390,  260,  453,  131,   75,
      386,  384,  392,  393,  394,  131,   75,  791,  391,  791,
      524,  132,  315,  392,  393,  394,  133,  133,  132,  456,
      457,  347,  791,  133,  133,  791,  330,  260,  458,  394,

      791,  464,  459,  339,  340,  396,  525,  460,  461,  397,
      394,  791,  179,  133,  332,  333,  341,  467,  408,  553,
      133,  791,  342,  554,  351,  219,  468,  465,  791,  348,
      469,  407,  408,  403,  462,  791,  470,  404,  407,  408,
      409,  334,  791,  353,  410,  408,  408,  409,  791,  791,
      411,  410,  475,  476,  347,  349,  791,  411,  472,  407,
      408,  409,  471,  791,  473,  477,  407,  408,  480,  354,
      791,  478,  481,  407,  408,  409,  412,  791,  411,  410,
      418,  290,  409,  412,  791,  411,  410,  418,  290,  791,
      349,  791,  411,  419,  418,  290,  791,  479,  791,  420,

      419,  141,   84,  485,  412,  791,  420,  486,  141,   84,
      791,  412,  791,  420,  142,  489,  490,  791,  412,  791,
      143,  142,  363,  290,  491,  421,  791,  143,  492,  430,
      379,  423,  421,  791,  493,  424,  430,  379,  431,  421,
      791,  365,  432,  496,  442,  431,  791,  433,  434,  432,
      430,  379,  431,  791,  433,  434,  497,  430,  379,  501,
      494,  498,  499,  502,  166,  167,  431,  366,  433,  434,
      432,  166,  167,  168,  435,  433,  434,  169,  506,  507,
      168,  435,  170,  170,  169,  506,  507,  380,  500,  170,
      170,  508,  507,  507,  380,  435,  509,  510,  508,  255,

      201,  313,  435,  509,  510,  512,  506,  507,  323,  170,
      513,  514,  324,  506,  507,  380,  170,  257,  258,  508,
      506,  507,  380,  511,  509,  510,  508,  517,  518,  380,
      511,  509,  510,  508,  378,  379,  380,  515,  509,  510,
      519,  527,  457,  447,  259,  520,  521,  448,  390,  260,
      528,  511,  382,  383,  529,  456,  457,  452,  511,  530,
      531,  453,  456,  457,  458,  511,  392,  393,  459,  457,
      457,  458,  522,  460,  461,  459,  538,  539,  386,  384,
      460,  461,  533,  456,  457,  458,  532,  534,  535,  540,
      456,  457,  544,  394,  541,  542,  545,  456,  457,  458,

      462,  460,  461,  459,  456,  457,  458,  462,  460,  461,
      459,  467,  408,  458,  536,  460,  461,  459,  467,  408,
      468,  543,  460,  461,  469,  547,  476,  468,  462,  791,
      470,  469,  467,  408,  468,  462,  791,  470,  548,  177,
      178,  551,  462,  791,  549,  552,  177,  178,  179,  462,
      791,  470,  180,  556,  557,  179,  471,  791,  181,  180,
      556,  557,  409,  471,  791,  181,  558,  557,  557,  409,
      550,  791,  559,  558,  286,  219,  347,  471,  791,  559,
      561,  556,  557,  356,  791,  791,  562,  357,  556,  557,
      409,  791,  791,  288,  558,  564,  565,  409,  560,  414,

      559,  558,  407,  408,  409,  560,  791,  559,  566,  570,
      791,  480,  465,  791,  567,  481,  791,  791,  313,  289,
      791,  411,  379,  573,  490,  791,  560,  791,  601,  791,
      418,  290,  574,  560,  791,  571,  575,  489,  490,  485,
      568,  791,  576,  486,  489,  490,  491,  412,  791,  420,
      492,  490,  490,  491,  602,  791,  493,  492,  581,  582,
      414,  791,  791,  493,  578,  489,  490,  491,  577,  791,
      579,  583,  489,  490,  586,  421,  791,  584,  587,  489,
      490,  491,  494,  791,  493,  492,  589,  507,  491,  494,
      791,  493,  492,  589,  507,  431,  416,  791,  493,  590,

      317,  201,  431,  585,  591,  592,  590,  589,  507,  374,
      494,  591,  592,  375,  239,  240,  431,  494,  319,  320,
      590,  239,  240,  168,  494,  591,  592,  241,  595,  518,
      168,  593,  242,  242,  241,  430,  379,  431,  593,  242,
      242,  596,  430,  379,  501,  321,  597,  598,  502,  506,
      507,  431,  593,  433,  434,  432,  506,  507,  380,  242,
      433,  434,  508,  507,  507,  380,  242,  509,  510,  508,
      506,  507,  313,  599,  509,  510,  512,  506,  507,  447,
      435,  513,  514,  603,  506,  507,  380,  435,  509,  510,
      508,  506,  507,  380,  511,  509,  510,  508,  791,  791,

      380,  511,  509,  510,  508,  791,  313,  503,  515,  509,
      510,  604,  606,  607,  386,  511,  427,  427,  791,  606,
      607,  380,  511,  791,  524,  608,  607,  607,  380,  511,
      609,  610,  608,  791,  791,  313,  511,  609,  610,  613,
      378,  379,  428,  428,  614,  615,  791,  606,  607,  447,
      525,  791,  791,  448,  606,  607,  380,  611,  382,  383,
      608,  606,  607,  380,  611,  609,  610,  608,  527,  457,
      380,  616,  609,  610,  608,  527,  457,  528,  791,  609,
      610,  529,  618,  539,  528,  384,  530,  531,  529,  527,
      457,  528,  611,  530,  531,  619,  527,  457,  623,  611,

      620,  621,  624,  166,  167,  528,  611,  530,  531,  529,
      166,  167,  168,  532,  530,  531,  169,  791,  791,  168,
      532,  170,  170,  169,  791,  386,  625,  622,  170,  170,
      626,  628,  629,  347,  532,  387,  387,  408,  628,  629,
      458,  532,  791,  656,  630,  629,  629,  458,  170,  631,
      632,  630,  791,  791,  386,  170,  631,  632,  634,  330,
      260,  388,  388,  635,  636,  791,  628,  629,  396,  657,
      791,  791,  397,  628,  629,  458,  633,  332,  333,  630,
      628,  629,  458,  633,  631,  632,  630,  639,  640,  458,
      637,  631,  632,  630,  456,  457,  458,  791,  631,  632,

      641,  646,  557,  544,  334,  642,  643,  545,  646,  557,
      468,  633,  460,  461,  647,  351,  219,  468,  633,  791,
      648,  647,  270,  271,  403,  633,  791,  648,  404,  270,
      271,  179,  644,  791,  353,  272,  651,  565,  179,  462,
      791,  273,  272,  467,  408,  468,  649,  791,  273,  652,
      467,  408,  551,  649,  791,  653,  552,  556,  557,  468,
      354,  791,  470,  469,  556,  557,  409,  791,  791,  470,
      558,  557,  557,  409,  791,  791,  559,  558,  556,  557,
      347,  654,  791,  559,  561,  556,  557,  480,  471,  791,
      562,  658,  556,  557,  409,  471,  553,  559,  558,  791,

      659,  409,  560,  791,  559,  558,  464,  414,  791,  560,
      791,  559,  661,  662,  677,  791,  465,  570,  678,  791,
      791,  409,  791,  560,  415,  663,  661,  662,  313,  791,
      560,  664,  465,  662,  662,  409,  791,  560,  700,  663,
      407,  408,  347,  571,  791,  664,  667,  661,  662,  480,
      416,  791,  668,  481,  661,  662,  409,  665,  791,  411,
      663,  573,  490,  409,  701,  791,  664,  663,  573,  490,
      574,  665,  791,  664,  575,  671,  582,  574,  669,  791,
      576,  575,  573,  490,  574,  412,  791,  576,  672,  177,
      178,  675,  665,  791,  673,  676,  177,  178,  179,  665,

      791,  576,  180,  680,  681,  179,  577,  791,  181,  180,
      680,  681,  491,  577,  791,  181,  682,  681,  681,  491,
      674,  791,  683,  682,  363,  290,  414,  577,  791,  683,
      685,  680,  681,  423,  791,  791,  686,  424,  680,  681,
      491,  791,  791,  365,  682,  688,  689,  491,  684,  791,
      683,  682,  489,  490,  491,  684,  791,  683,  690,  589,
      507,  586,  571,  791,  691,  587,  589,  507,  431,  366,
      791,  493,  590,  589,  507,  431,  684,  591,  592,  590,
      589,  507,  501,  684,  591,  592,  693,  239,  240,  431,
      692,  591,  592,  590,  239,  240,  168,  494,  591,  592,

      241,  695,  607,  168,  593,  242,  242,  241,  695,  607,
      431,  593,  242,  242,  696,  430,  379,  431,  593,  697,
      698,  696,  695,  607,  501,  593,  697,  698,  502,  305,
      306,  431,  242,  433,  434,  696,  305,  306,  168,  242,
      697,  698,  307,  506,  507,  168,  699,  308,  308,  307,
      589,  507,  447,  699,  308,  308,  603,  606,  607,  431,
      435,  509,  510,  590,  606,  607,  380,  699,  591,  592,
      608,  607,  607,  380,  308,  609,  610,  608,  606,  607,
      313,  308,  609,  610,  613,  606,  607,  447,  511,  614,
      615,  702,  606,  607,  380,  593,  609,  610,  608,  606,

      607,  380,  611,  609,  610,  608,  791,  791,  380,  611,
      609,  610,  608,  791,  313,  503,  616,  609,  610,  703,
      791,  313,  791,  611,  700,  700,  791,  705,  629,  386,
      611,  700,  791,  457,  705,  629,  528,  611,  791,  717,
      706,  791,  791,  528,  611,  707,  708,  706,  791,  791,
      701,  701,  707,  708,  791,  390,  260,  701,  705,  629,
      791,  791,  791,  791,  452,  718,  791,  528,  453,  239,
      240,  706,  709,  392,  393,  791,  707,  708,  168,  709,
      239,  240,  241,  711,  640,  386,  791,  242,  242,  168,
      791,  791,  528,  241,  791,  524,  712,  791,  242,  242,

      394,  713,  714,  709,  527,  457,  625,  791,  791,  791,
      720,  527,  457,  623,  242,  791,  524,  624,  628,  629,
      528,  525,  530,  531,  529,  242,  791,  458,  715,  530,
      531,  630,  628,  629,  629,  629,  631,  632,  791,  791,
      791,  458,  525,  386,  791,  630,  791,  634,  791,  532,
      631,  632,  635,  636,  791,  791,  532,  628,  629,  791,
      791,  791,  791,  633,  791,  791,  544,  791,  347,  791,
      719,  628,  629,  628,  629,  631,  632,  633,  739,  637,
      458,  791,  458,  791,  630,  791,  630,  628,  629,  631,
      632,  631,  632,  791,  722,  723,  458,  791,  791,  791,

      630,  791,  633,  458,  669,  631,  632,  724,  722,  723,
      723,  723,  725,  726,  791,  791,  633,  458,  633,  386,
      791,  724,  791,  729,  456,  457,  725,  726,  730,  731,
      791,  347,  633,  544,  791,  791,  791,  545,  791,  727,
      791,  739,  460,  461,  791,  722,  723,  722,  723,  791,
      791,  791,  791,  727,  458,  732,  458,  791,  724,  791,
      724,  722,  723,  725,  726,  725,  726,  669,  386,  462,
      458,  791,  646,  557,  724,  646,  557,  791,  775,  725,
      726,  468,  791,  791,  468,  647,  646,  557,  647,  791,
      727,  648,  727,  791,  648,  551,  791,  386,  791,  733,

      270,  271,  270,  271,  776,  648,  727,  775,  791,  179,
      791,  179,  791,  272,  791,  272,  791,  649,  791,  273,
      649,  273,  791,  735,  662,  735,  662,  791,  467,  408,
      791,  649,  468,  776,  468,  386,  736,  551,  736,  339,
      340,  552,  737,  791,  737,  775,  791,  470,  179,  791,
      339,  340,  341,  556,  557,  414,  791,  791,  342,  179,
      791,  791,  480,  341,  791,  786,  658,  791,  738,  342,
      738,  776,  559,  471,  646,  557,  661,  662,  791,  791,
      791,  661,  662,  468,  791,  409,  791,  647,  791,  663,
      409,  766,  791,  648,  663,  664,  662,  662,  560,  791,

      664,  661,  662,  661,  662,  347,  791,  553,  414,  667,
      480,  741,  409,  791,  740,  668,  663,  739,  786,  649,
      664,  665,  664,  661,  662,  791,  665,  791,  791,  791,
      414,  791,  409,  791,  490,  791,  663,  791,  743,  681,
      753,  669,  664,  669,  766,  791,  665,  574,  665,  791,
      791,  744,  743,  681,  418,  290,  791,  745,  791,  791,
      791,  574,  791,  485,  791,  744,  754,  486,  665,  270,
      271,  745,  791,  420,  791,  791,  270,  271,  179,  791,
      791,  791,  272,  746,  791,  179,  791,  791,  273,  272,
      791,  748,  689,  573,  490,  273,  791,  746,  791,  421,

      574,  791,  675,  791,  749,  791,  676,  573,  490,  791,
      750,  791,  576,  791,  680,  681,  574,  791,  791,  791,
      575,  680,  681,  491,  791,  791,  576,  682,  681,  681,
      491,  791,  791,  683,  682,  791,  751,  414,  577,  791,
      683,  685,  680,  681,  680,  681,  791,  686,  791,  680,
      681,  586,  577,  491,  791,  755,  791,  682,  491,  684,
      677,  683,  682,  683,  756,  791,  684,  791,  683,  791,
      570,  758,  759,  571,  791,  791,  791,  791,  791,  791,
      491,  791,  758,  759,  760,  791,  791,  684,  791,  684,
      761,  491,  791,  625,  684,  760,  571,  778,  759,  759,

      791,  761,  791,  775,  791,  489,  490,  414,  791,  791,
      791,  764,  758,  759,  586,  791,  762,  765,  587,  758,
      759,  491,  791,  791,  493,  760,  791,  762,  491,  776,
      791,  761,  760,  589,  507,  695,  607,  791,  761,  791,
      791,  791,  501,  766,  431,  791,  693,  791,  696,  791,
      494,  591,  592,  697,  698,  791,  791,  762,  695,  607,
      791,  791,  791,  791,  762,  791,  791,  431,  791,  791,
      791,  696,  695,  607,  695,  607,  697,  698,  593,  791,
      699,  501,  791,  431,  791,  767,  791,  696,  305,  306,
      697,  698,  697,  698,  791,  305,  306,  168,  791,  791,

      791,  307,  791,  699,  168,  791,  308,  308,  307,  606,
      607,  695,  607,  308,  308,  791,  791,  699,  447,  699,
      431,  791,  702,  791,  696,  705,  629,  609,  610,  697,
      698,  791,  677,  308,  528,  791,  788,  791,  706,  791,
      308,  791,  786,  707,  708,  791,  705,  629,  705,  629,
      791,  791,  791,  791,  611,  528,  699,  623,  791,  706,
      791,  768,  705,  629,  707,  708,  707,  708,  766,  791,
      709,  528,  791,  791,  791,  706,  239,  240,  791,  791,
      707,  708,  791,  239,  240,  168,  791,  791,  791,  241,
      791,  709,  168,  709,  242,  242,  241,  770,  723,  770,

      723,  242,  242,  791,  791,  791,  528,  709,  528,  791,
      771,  791,  771,  527,  457,  772,  773,  772,  773,  791,
      791,  242,  623,  791,  791,  791,  624,  791,  242,  791,
      791,  530,  531,  791,  770,  723,  305,  306,  791,  791,
      791,  791,  774,  528,  774,  168,  791,  771,  791,  307,
      305,  306,  772,  773,  308,  308,  791,  791,  532,  168,
      791,  791,  791,  307,  628,  629,  791,  791,  308,  308,
      791,  705,  629,  544,  791,  791,  791,  719,  791,  774,
      528,  308,  631,  632,  706,  722,  723,  722,  723,  707,
      708,  791,  791,  791,  458,  308,  458,  791,  724,  791,

      724,  723,  723,  725,  726,  725,  726,  791,  791,  633,
      386,  791,  791,  791,  729,  791,  709,  791,  791,  730,
      731,  791,  722,  723,  722,  723,  791,  791,  791,  791,
      727,  544,  727,  458,  791,  777,  791,  724,  722,  723,
      725,  726,  725,  726,  791,  791,  732,  458,  791,  646,
      557,  724,  722,  723,  791,  791,  725,  726,  551,  791,
      791,  458,  733,  735,  662,  724,  791,  727,  648,  727,
      725,  726,  468,  791,  791,  791,  736,  735,  662,  735,
      662,  791,  737,  727,  791,  791,  468,  791,  551,  791,
      736,  791,  779,  791,  649,  791,  737,  727,  737,  791,

      339,  340,  339,  340,  791,  791,  791,  791,  738,  179,
      791,  179,  791,  341,  791,  341,  661,  662,  791,  342,
      791,  342,  738,  791,  738,  480,  791,  735,  662,  740,
      743,  681,  743,  681,  791,  664,  468,  791,  791,  574,
      736,  574,  791,  744,  791,  744,  737,  743,  681,  745,
      791,  745,  791,  791,  270,  271,  675,  791,  791,  791,
      780,  665,  791,  179,  791,  791,  745,  272,  791,  270,
      271,  791,  738,  273,  791,  746,  791,  746,  179,  791,
      782,  759,  272,  791,  791,  782,  759,  791,  273,  574,
      791,  791,  746,  783,  574,  791,  573,  490,  783,  784,

      791,  339,  340,  791,  784,  675,  791,  791,  791,  676,
      179,  791,  791,  791,  341,  576,  791,  791,  339,  340,
      342,  791,  791,  680,  681,  785,  791,  179,  791,  791,
      785,  341,  586,  791,  743,  681,  755,  342,  791,  758,
      759,  577,  683,  574,  791,  791,  791,  744,  491,  791,
      758,  759,  760,  745,  791,  791,  791,  791,  761,  491,
      791,  759,  759,  760,  758,  759,  791,  791,  684,  761,
      414,  791,  791,  586,  764,  791,  791,  787,  791,  746,
      765,  758,  759,  761,  762,  791,  791,  791,  758,  759,
      491,  791,  791,  791,  760,  762,  791,  491,  791,  791,

      761,  760,  695,  607,  705,  629,  766,  761,  791,  762,
      791,  501,  791,  623,  791,  767,  791,  768,  770,  723,
      697,  698,  707,  708,  791,  791,  762,  528,  791,  791,
      791,  771,  791,  762,  791,  791,  772,  773,  791,  770,
      723,  770,  723,  791,  791,  791,  791,  699,  528,  709,
      623,  791,  771,  791,  789,  770,  723,  772,  773,  772,
      773,  791,  791,  774,  528,  791,  791,  791,  771,  305,
      306,  791,  791,  772,  773,  791,  305,  306,  168,  791,
      791,  791,  307,  791,  774,  168,  774,  308,  308,  307,
      722,  723,  770,  723,  308,  308,  791,  791,  791,  544,

      774,  528,  791,  777,  791,  771,  735,  662,  725,  726,
      772,  773,  791,  791,  308,  551,  791,  743,  681,  779,
      791,  308,  791,  791,  791,  737,  675,  791,  791,  791,
      780,  782,  759,  782,  759,  727,  745,  774,  791,  791,
      574,  791,  574,  791,  783,  791,  783,  782,  759,  791,
      784,  738,  784,  791,  339,  340,  675,  791,  791,  791,
      790,  791,  746,  179,  791,  791,  784,  341,  339,  340,
      758,  759,  791,  342,  791,  791,  785,  179,  785,  586,
      791,  341,  791,  787,  782,  759,  791,  342,  791,  761,
      791,  791,  785,  574,  791,  770,  723,  783,  782,  759,

      791,  791,  791,  784,  623,  791,  791,  675,  789,  791,
      791,  790,  791,  772,  773,  762,  791,  784,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  785,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      774,  791,  791,  785,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   55,   55,   55,   55,  791,   55,
       55,   55,   55,   55,   69,   69,  791,   69,   69,   77,
       77,  791,  791,   77,   77,   77,   77,   77,   81,   81,
      791,   81,   81,   86,   86,  791,  791,   86,   86,  791,
       86,   86,   52,   52,   52,   52,  791,  791,  791,   52,

       55,   55,   55,   55,  791,  791,  791,   55,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,  101,  101,
      791,  101,  101,  101,  101,  101,  101,  101,  103,  103,
      120,  120,  120,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,   55,   55,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  149,  149,  149,  149,  149,

      149,  149,  149,  149,  149,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  228,  228,  228,  228,  228,

      228,  228,  228,  228,  228,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  295,  295,  295,  295,  295,

      295,  295,  295,  295,  295,  296,  296,  296,  296,  296,
      296,  296,  296,  296,  296,  298,  298,  298,  298,  298,
      298,  298,  298,  298,  298,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  304,  304,  304,  304,  304,
      304,  304,  304,  304,  304,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  322,  322,  322,  322,  322,
      322,  322,  322,  322,  322,  327,  327,  327,  327,  327,
      327,  327,  327,  327,  327,  329,  329,  329,  329,  329,

      329,  329,  329,  329,  329,  335,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  346,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  360,  360,  360,  360,  360,
      360,  360,  360,  360,  360,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  368,  368,  368,  368,  368,

      368,  368,  368,  368,  368,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  377,  377,  377,  377,  377,
      377,  377,  377,  377,  377,  385,  385,  385,  385,  385,
      385,  385,  385,  385,  385,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  395,  395,  395,  395,  395,
      395,  395,  395,  395,  395,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  422,  425,  425,  425,  425,  425,
      425,  425,  425,  425,  425,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  429,  429,  429,  429,  429,

      429,  429,  429,  429,  429,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  463,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  474,  474,  474,  474,  474,
      474,  474,  474,  474,  474,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  537,  537,  537,  537,  537,
      537,  537,  537,  537,  537,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  563,  563,  563,  563,  563,
      563,  563,  563,  563,  563,  569,  569,  569,  569,  569,
      569,  569,  569,  569,  569,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  316,  316,  316,  316,  316,
      316,  316,  316,  316,  316,  238,  238,  238,  238,  238,

      238,  238,  238,  238,  238,  594,  594,  594,  594,  594,
      594,  594,  594,  594,  594,  600,  600,  600,  600,  600,
      600,  600,  600,  600,  600,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  612,  612,  612,  612,  612,
      612,  612,  612,  612,  612,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  627,  627,  627,  627,  627,
      627,  627,  627,  627,  627,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  638,  638,  638,  638,  638,

      638,  638,  638,  638,  638,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  466,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  660,  660,  660,  660,  660,
      660,  660,  660,  660,  660,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  176,  176,  176,  176,  176,

      176,  176,  176,  176,  176,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  488,  488,  488,  488,  488,
      488,  488,  488,  488,  488,  588,  588,  588,  588,  588,
      588,  588,  588,  588,  588,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  429,  429,  429,  429,  429,
      429,  429,  429,  429,  429,  304,  304,  304,  304,  304,

      304,  304,  304,  304,  304,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  605,  605,  605,  605,  605,
      605,  605,  605,  605,  605,  704,  704,  704,  704,  704,
      704,  704,  704,  704,  704,  389,  389,  389,  389,  389,
      389,  389,  389,  389,  389,  710,  710,  710,  710,  710,
      710,  710,  710,  710,  710,  526,  526,  526,  526,  526,
      526,  526,  526,  526,  526,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  164,  721,  721,  721,  721,  721,

      721,  721,  721,  721,  721,  728,  728,  728,  728,  728,
      728,  728,  728,  728,  728,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  555,  555,  555,  555,  555,
      555,  555,  555,  555,  555,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  417,  417,  417,  417,  417,
      417,  417,  417,  417,  417,  747,  747,  747,  747,  747,

      747,  747,  747,  747,  747,  752,  752,  752,  752,  752,
      752,  752,  752,  752,  752,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  763,  763,  763,  763,  763,
      763,  763,  763,  763,  763,  769,  769,  769,  769,  769,
      769,  769,  769,  769,  769,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,   11,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791
    } ;

static yyconst flex_int16_t yy_chk[6015] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    6,    2,    8,    4,   10,    6,   13,    8,
       13,   10,   16,   18,   21,   23,   23,   23,   23,   27,
       27,   29,   29,   41,  786,   21,   41,   18,   50,    3,
       50,    4,    5,    5,    5,    5,    5,    5,    5,   16,
      776,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    7,    7,    7,    7,    7,    7,
        7,  775,   61,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    9,   61,   22,   34,   52,
        9,    9,    9,    9,    9,    9,    9,   22,   22,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   24,   35,   34,   35,   24,   52,   35,   39,   39,
       47,   47,  153,   24,   25,  153,   25,   25,   25,   25,
       72,   39,   72,   47,   76,   72,   39,   39,   76,   47,
       25,   25,   25,  766,   79,   49,   49,   54,   54,   54,
       79,   25,   40,   40,  765,   25,   25,   26,   49,   26,

       26,   26,   26,   39,   49,   40,   48,   48,   80,   80,
       40,   40,  754,   26,   26,   63,   63,   54,  753,   48,
       56,   56,   56,  161,   26,   48,   63,   49,   26,  739,
       63,   40,   60,   60,   60,   60,   62,   40,   62,   62,
       62,   62,  732,  731,   85,   48,   66,   66,   85,  161,
       56,   57,   57,   57,   57,  117,  108,   66,  108,   75,
       75,   66,   57,   57,  718,   57,   84,   84,   86,   86,
       88,   88,   75,   57,   57,  717,   57,   75,   75,   84,
      100,   86,  117,   88,  100,   84,   90,   86,  701,   88,
       91,  109,   89,   89,  700,  109,   90,   90,   90,  686,

       91,   91,   91,   88,   75,   89,  129,  134,   94,  134,
      129,   89,   95,   90,   94,   94,   94,   91,   95,   95,
       95,   97,   97,  103,  103,   97,   97,   97,   97,  107,
      107,  135,   89,   92,  103,  135,  669,  139,  103,  113,
      113,  139,  107,   92,   92,   92,   92,  107,  107,  668,
      657,  656,  113,   92,   92,   92,  114,  114,  113,  185,
       92,  116,   92,   92,   92,   92,   92,  115,  115,  114,
      119,  116,  116,  116,  107,  114,  119,  119,  119,  637,
      115,  121,  121,  121,  121,  185,  115,  162,  116,  125,
      125,  162,  147,  147,  172,  154,  154,  114,  172,  636,

      125,  616,  163,  163,  125,  147,  130,  130,  154,  615,
      115,  118,  118,  118,  118,  163,  174,  174,  602,  130,
      601,  118,  118,  118,  130,  130,  131,  131,  579,  174,
      118,  118,  118,  118,  118,  122,  122,  122,  122,  131,
      140,  140,  183,  571,  131,  131,  183,  122,  570,  122,
      190,  130,  189,  140,  132,  132,  133,  133,  122,  140,
      122,  562,  191,  132,  141,  141,  191,  132,  536,  133,
      189,  131,  132,  132,  133,  133,  190,  141,  142,  142,
      192,  143,  143,  141,  192,  144,  144,  142,  203,  145,
      145,  142,  159,  159,  143,  535,  189,  142,  144,  132,

      143,  133,  145,  525,  144,  159,  152,  152,  145,  150,
      150,  159,  151,  151,  203,  524,  160,  160,  150,  152,
      515,  151,  150,  514,  145,  151,  144,  150,  150,  160,
      151,  151,  209,  157,  157,  160,  209,  487,  484,  210,
      158,  158,  157,  210,  483,  152,  157,  165,  165,  158,
      228,  225,  157,  158,  150,  225,  165,  151,  160,  158,
      165,  166,  166,  167,  167,  165,  165,  227,  228,  236,
      166,  227,  167,  236,  166,  473,  167,  168,  168,  166,
      166,  167,  167,  465,  169,  169,  168,  229,  464,  454,
      168,  230,  165,  169,  228,  168,  168,  169,  170,  170,

      171,  171,  169,  169,  231,  229,  166,  170,  167,  230,
      235,  170,  451,  171,  173,  173,  170,  170,  171,  171,
      450,  439,  168,  176,  176,  177,  177,  173,  235,  169,
      231,  229,  176,  243,  177,  230,  176,  243,  177,  178,
      178,  438,  176,  170,  177,  171,  179,  179,  178,  428,
      427,  425,  178,  173,  235,  179,  422,  416,  178,  179,
      180,  180,  181,  181,  250,  179,  253,  182,  182,  180,
      253,  181,  415,  180,  250,  181,  184,  184,  202,  180,
      182,  181,  202,  194,  194,  262,  182,  405,  202,  184,
      195,  195,  194,  402,  401,  184,  194,  196,  196,  195,

      250,  194,  194,  195,  197,  197,  196,  395,  195,  195,
      196,  262,  182,  197,  202,  196,  196,  197,  198,  198,
      199,  199,  197,  197,  281,  388,  267,  198,  194,  199,
      267,  198,  387,  199,  281,  195,  198,  198,  199,  199,
      201,  201,  196,  200,  200,  376,  274,  284,  373,  197,
      274,  284,  200,  201,  207,  207,  200,  298,  201,  201,
      281,  200,  200,  198,  372,  199,  368,  207,  208,  208,
      212,  212,  207,  207,  297,  298,  310,  367,  297,  212,
      310,  208,  360,  212,  355,  201,  208,  208,  200,  212,
      349,  213,  213,  214,  214,  348,  215,  215,  345,  207,

      213,  298,  214,  343,  213,  215,  214,  216,  216,  215,
      213,  335,  214,  208,  327,  215,  216,  322,  217,  217,
      216,  218,  218,  219,  219,  220,  216,  217,  315,  220,
      218,  217,  223,  223,  218,  220,  219,  217,  312,  314,
      218,  311,  219,  224,  224,  223,  237,  237,  312,  328,
      344,  223,  309,  328,  344,  237,  224,  238,  238,  237,
      301,  220,  224,  361,  237,  237,  238,  361,  219,  296,
      238,  239,  239,  325,  312,  238,  238,  223,  295,  299,
      239,  293,  283,  325,  239,  240,  240,  275,  224,  239,
      239,  237,  241,  241,  240,  265,  252,  299,  240,  242,

      242,  241,  238,  240,  240,  241,  245,  245,  242,  325,
      241,  241,  242,  246,  246,  245,  239,  242,  242,  245,
      247,  247,  246,  299,  245,  245,  246,  248,  248,  247,
      240,  246,  246,  247,  249,  249,  248,  241,  247,  247,
      248,  251,  251,  249,  242,  248,  248,  249,  254,  254,
      244,  245,  249,  249,  251,  255,  255,  234,  246,  251,
      251,  254,  256,  256,  226,  247,  254,  254,  255,  257,
      257,  256,  248,  255,  255,  256,  258,  258,  222,  249,
      256,  256,  257,  259,  259,  211,  251,  257,  257,  258,
      260,  260,  206,  254,  258,  258,  259,  193,  188,  175,

      255,  259,  259,  260,  266,  266,  261,  256,  260,  260,
      261,  268,  268,  164,  257,  156,  261,  266,  269,  269,
      268,  258,  266,  266,  268,  270,  270,  269,  259,  155,
      268,  269,  271,  271,  270,  260,  149,  269,  270,  272,
      272,  271,  261,  148,  270,  271,  273,  273,  272,  266,
      146,  271,  272,  276,  276,  273,  138,  137,  272,  273,
      277,  277,  276,  136,  128,  273,  276,  278,  278,  277,
      127,  126,  276,  277,  279,  279,  278,  123,  112,  277,
      278,  280,  280,  279,  282,  282,  278,  279,  285,  285,
      280,  286,  286,  279,  280,  111,  110,  282,  288,  288,

      280,  285,  106,  282,  286,  287,  287,  285,  289,  289,
      286,  288,  290,  290,  287,  105,  291,  288,  287,  300,
      291,  289,  294,  294,  287,  290,  291,  289,  104,  282,
      313,  290,  346,  285,  313,  294,  286,  300,   99,   96,
      313,  294,  346,  288,   83,   82,  302,  302,   77,   71,
      287,   70,  291,  289,   68,  302,   67,  290,   58,  302,
      303,  303,   55,  300,  302,  302,  313,  294,  346,  303,
       45,  304,  304,  303,  305,  305,   44,   38,  303,  303,
      304,   33,   32,  305,  304,  306,  306,  305,   31,  304,
      304,  302,  305,  305,  306,   28,  353,  353,  306,  307,

      307,   20,   19,  306,  306,  303,   17,   15,  307,  353,
      316,  316,  307,  308,  308,  353,  304,  307,  307,  305,
      317,  317,  308,  316,   11,    0,  308,    0,  316,  316,
      306,  308,  308,  317,  318,  318,    0,    0,  317,  317,
        0,  319,  319,  318,  307,    0,  358,  318,  320,  320,
      321,  321,  318,  318,  319,  316,  358,    0,  308,  319,
      319,  320,    0,  321,    0,  317,  320,  320,  321,  321,
        0,  323,  323,    0,    0,    0,    0,    0,    0,  318,
      323,    0,  358,    0,  323,    0,  319,  324,  324,  323,
      323,  326,  326,  320,    0,  321,  324,    0,  371,    0,

      324,  329,  329,  347,  326,  324,  324,  347,  371,  326,
      326,  330,  330,  347,  329,    0,  323,  385,  400,  329,
      329,    0,  331,  331,  330,  332,  332,  385,  400,  330,
      330,  331,  324,    0,  371,  331,  326,    0,  332,  347,
      331,  331,  413,  332,  332,  386,  329,  333,  333,  386,
      334,  334,  413,  385,  400,  386,  330,    0,    0,    0,
      333,    0,    0,  334,    0,  333,  333,  331,  334,  334,
      332,  336,  336,    0,  337,  337,    0,    0,  413,    0,
      336,  386,    0,  337,  336,  338,  338,  337,  339,  339,
      336,    0,  333,  337,  338,  334,    0,  339,  338,  340,

      340,  339,  341,  341,  338,    0,    0,  339,  340,    0,
        0,  341,  340,  342,  342,  341,  350,  350,  340,    0,
        0,  341,  342,  351,  351,    0,  342,  354,  354,  350,
      352,  352,  342,    0,    0,  350,  351,    0,    0,  352,
      354,    0,  351,  352,  356,  356,  354,  357,  357,  352,
        0,  359,  359,  356,  362,  362,  357,  356,  363,  363,
      357,  350,    0,  356,  359,    0,  357,  362,  351,    0,
      359,  363,    0,  362,    0,  352,    0,  363,  364,  364,
        0,  365,  365,    0,    0,  366,  366,  364,    0,  356,
        0,  364,  357,    0,  365,    0,  359,  364,  366,  362,

      365,  369,  369,  363,  366,    0,    0,    0,  398,  398,
      369,    0,  426,    0,  369,  370,  370,  398,    0,  369,
      369,  398,  426,  364,  370,    0,  365,  398,  370,    0,
      366,  374,  374,  370,  370,    0,    0,    0,  375,  375,
      374,    0,    0,    0,  374,    0,  369,  375,  426,  374,
      374,  375,  377,  377,  378,  378,  375,  375,    0,    0,
      370,  377,    0,  378,    0,  377,    0,  378,  379,  379,
      377,  377,  378,  378,    0,  414,  374,  379,    0,  414,
        0,  379,    0,  375,    0,  414,  379,  379,    0,  380,
      380,  381,  381,    0,    0,    0,    0,  377,  380,  378,

      381,    0,  380,    0,  381,  382,  382,  380,  380,  381,
      381,  414,    0,  379,  382,    0,    0,    0,  382,  383,
      383,  436,    0,  382,  382,  436,  384,  384,  383,  389,
      389,  436,  383,    0,  380,  384,  381,  383,  383,  384,
      390,  390,  389,    0,  384,  384,  437,  389,  389,    0,
      382,    0,    0,  390,  391,  391,  437,  436,  390,  390,
        0,    0,    0,  391,  383,  392,  392,  391,  393,  393,
      449,  384,  391,  391,  389,  394,  394,    0,  392,    0,
      449,  393,  437,  392,  392,  390,  393,  393,  394,  396,
      396,  463,    0,  394,  394,    0,  397,  397,  396,  391,

        0,  463,  396,  399,  399,  397,  449,  396,  396,  397,
      392,    0,  399,  393,  397,  397,  399,  403,  403,  472,
      394,    0,  399,  472,  404,  404,  403,  463,    0,  472,
      403,  406,  406,  404,  396,    0,  403,  404,  407,  407,
      406,  397,    0,  404,  406,  408,  408,  407,    0,    0,
      406,  407,  409,  409,  408,  472,    0,  407,  408,  410,
      410,  409,  403,    0,  408,  409,  411,  411,  410,  404,
        0,  409,  410,  412,  412,  411,  406,    0,  410,  411,
      417,  417,  412,  407,    0,  411,  412,  418,  418,    0,
      408,    0,  412,  417,  419,  419,    0,  409,    0,  417,

      418,  420,  420,  419,  410,    0,  418,  419,  421,  421,
        0,  411,    0,  419,  420,  423,  423,    0,  412,    0,
      420,  421,  424,  424,  423,  417,    0,  421,  423,  429,
      429,  424,  418,    0,  423,  424,  430,  430,  429,  419,
        0,  424,  429,  431,  431,  430,    0,  429,  429,  430,
      432,  432,  431,    0,  430,  430,  431,  433,  433,  432,
      423,  431,  431,  432,  434,  434,  433,  424,  432,  432,
      433,  435,  435,  434,  429,  433,  433,  434,  440,  440,
      435,  430,  434,  434,  435,  441,  441,  440,  431,  435,
      435,  440,  442,  442,  441,  432,  440,  440,  441,  443,

      443,  442,  433,  441,  441,  442,  444,  444,  443,  434,
      442,  442,  443,  445,  445,  444,  435,  443,  443,  444,
      446,  446,  445,  440,  444,  444,  445,  447,  447,  446,
      441,  445,  445,  446,  448,  448,  447,  442,  446,  446,
      447,  452,  452,  448,  443,  447,  447,  448,  453,  453,
      452,  444,  448,  448,  452,  455,  455,  453,  445,  452,
      452,  453,  456,  456,  455,  446,  453,  453,  455,  457,
      457,  456,  447,  455,  455,  456,  458,  458,  457,  448,
      456,  456,  457,  459,  459,  458,  452,  457,  457,  458,
      460,  460,  459,  453,  458,  458,  459,  461,  461,  460,

      455,  459,  459,  460,  462,  462,  461,  456,  460,  460,
      461,  466,  466,  462,  457,  461,  461,  462,  467,  467,
      466,  458,  462,  462,  466,  468,  468,  467,  459,    0,
      466,  467,  469,  469,  468,  460,    0,  467,  468,  470,
      470,  469,  461,    0,  468,  469,  471,  471,  470,  462,
        0,  469,  470,  474,  474,  471,  466,    0,  470,  471,
      475,  475,  474,  467,    0,  471,  474,  476,  476,  475,
      468,    0,  474,  475,  477,  477,  476,  469,    0,  475,
      476,  478,  478,  477,    0,    0,  476,  477,  479,  479,
      478,    0,    0,  477,  478,  480,  480,  479,  474,  482,

      478,  479,  481,  481,  480,  475,    0,  479,  480,  482,
        0,  481,  476,    0,  480,  481,    0,    0,  503,  477,
        0,  481,  503,  485,  485,    0,  478,    0,  503,    0,
      486,  486,  485,  479,    0,  482,  485,  488,  488,  486,
      480,    0,  485,  486,  489,  489,  488,  481,    0,  486,
      488,  490,  490,  489,  503,    0,  488,  489,  491,  491,
      490,    0,    0,  489,  490,  492,  492,  491,  485,    0,
      490,  491,  493,  493,  492,  486,    0,  491,  492,  494,
      494,  493,  488,    0,  492,  493,  495,  495,  494,  489,
        0,  493,  494,  496,  496,  495,  490,    0,  494,  495,

      497,  497,  496,  491,  495,  495,  496,  498,  498,  497,
      492,  496,  496,  497,  499,  499,  498,  493,  497,  497,
      498,  500,  500,  499,  494,  498,  498,  499,  501,  501,
      500,  495,  499,  499,  500,  502,  502,  501,  496,  500,
      500,  501,  504,  504,  502,  497,  501,  501,  502,  505,
      505,  504,  498,  502,  502,  504,  506,  506,  505,  499,
      504,  504,  505,  507,  507,  506,  500,  505,  505,  506,
      508,  508,  507,  501,  506,  506,  507,  509,  509,  508,
      502,  507,  507,  508,  510,  510,  509,  504,  508,  508,
      509,  511,  511,  510,  505,  509,  509,  510,    0,    0,

      511,  506,  510,  510,  511,    0,  513,  512,  507,  511,
      511,  512,  516,  516,  523,  508,  513,  512,    0,  517,
      517,  516,  509,    0,  523,  516,  518,  518,  517,  510,
      516,  516,  517,    0,    0,  518,  511,  517,  517,  518,
      519,  519,  513,  512,  518,  518,    0,  520,  520,  519,
      523,    0,    0,  519,  521,  521,  520,  516,  519,  519,
      520,  522,  522,  521,  517,  520,  520,  521,  526,  526,
      522,  518,  521,  521,  522,  527,  527,  526,    0,  522,
      522,  526,  528,  528,  527,  519,  526,  526,  527,  529,
      529,  528,  520,  527,  527,  528,  530,  530,  529,  521,

      528,  528,  529,  531,  531,  530,  522,  529,  529,  530,
      532,  532,  531,  526,  530,  530,  531,    0,    0,  532,
      527,  531,  531,  532,    0,  534,  533,  528,  532,  532,
      533,  537,  537,  553,  529,  534,  533,  553,  538,  538,
      537,  530,    0,  553,  537,  539,  539,  538,  531,  537,
      537,  538,    0,    0,  539,  532,  538,  538,  539,  540,
      540,  534,  533,  539,  539,    0,  541,  541,  540,  553,
        0,    0,  540,  542,  542,  541,  537,  540,  540,  541,
      543,  543,  542,  538,  541,  541,  542,  544,  544,  543,
      539,  542,  542,  543,  545,  545,  544,    0,  543,  543,

      544,  546,  546,  545,  540,  544,  544,  545,  547,  547,
      546,  541,  545,  545,  546,  548,  548,  547,  542,    0,
      546,  547,  549,  549,  548,  543,    0,  547,  548,  550,
      550,  549,  544,    0,  548,  549,  551,  551,  550,  545,
        0,  549,  550,  552,  552,  551,  546,    0,  550,  551,
      554,  554,  552,  547,    0,  551,  552,  555,  555,  554,
      548,    0,  552,  554,  556,  556,  555,    0,    0,  554,
      555,  557,  557,  556,    0,    0,  555,  556,  558,  558,
      557,  551,    0,  556,  557,  559,  559,  558,  552,    0,
      557,  558,  560,  560,  559,  554,  561,  558,  559,    0,

      561,  560,  555,    0,  559,  560,  561,  569,    0,  556,
        0,  560,  563,  563,  578,    0,  557,  569,  578,    0,
        0,  563,    0,  558,  578,  563,  564,  564,  600,    0,
      559,  563,  561,  565,  565,  564,    0,  560,  600,  564,
      566,  566,  565,  569,    0,  564,  565,  567,  567,  566,
      578,    0,  565,  566,  568,  568,  567,  563,    0,  566,
      567,  572,  572,  568,  600,    0,  567,  568,  573,  573,
      572,  564,    0,  568,  572,  574,  574,  573,  565,    0,
      572,  573,  575,  575,  574,  566,    0,  573,  574,  576,
      576,  575,  567,    0,  574,  575,  577,  577,  576,  568,

        0,  575,  576,  580,  580,  577,  572,    0,  576,  577,
      581,  581,  580,  573,    0,  577,  580,  582,  582,  581,
      574,    0,  580,  581,  583,  583,  582,  575,    0,  581,
      582,  584,  584,  583,    0,    0,  582,  583,  585,  585,
      584,    0,    0,  583,  584,  586,  586,  585,  580,    0,
      584,  585,  587,  587,  586,  581,    0,  585,  586,  588,
      588,  587,  582,    0,  586,  587,  589,  589,  588,  583,
        0,  587,  588,  590,  590,  589,  584,  588,  588,  589,
      591,  591,  590,  585,  589,  589,  590,  592,  592,  591,
      586,  590,  590,  591,  593,  593,  592,  587,  591,  591,

      592,  594,  594,  593,  588,  592,  592,  593,  595,  595,
      594,  589,  593,  593,  594,  596,  596,  595,  590,  594,
      594,  595,  597,  597,  596,  591,  595,  595,  596,  598,
      598,  597,  592,  596,  596,  597,  599,  599,  598,  593,
      597,  597,  598,  603,  603,  599,  594,  598,  598,  599,
      604,  604,  603,  595,  599,  599,  603,  605,  605,  604,
      596,  603,  603,  604,  606,  606,  605,  597,  604,  604,
      605,  607,  607,  606,  598,  605,  605,  606,  608,  608,
      607,  599,  606,  606,  607,  609,  609,  608,  603,  607,
      607,  608,  610,  610,  609,  604,  608,  608,  609,  611,

      611,  610,  605,  609,  609,  610,    0,    0,  611,  606,
      610,  610,  611,    0,  612,  613,  607,  611,  611,  613,
        0,  614,    0,  608,  612,  613,    0,  617,  617,  625,
      609,  614,    0,  625,  618,  618,  617,  610,    0,  625,
      617,    0,    0,  618,  611,  617,  617,  618,    0,    0,
      612,  613,  618,  618,    0,  619,  619,  614,  620,  620,
        0,    0,    0,    0,  619,  625,    0,  620,  619,  621,
      621,  620,  617,  619,  619,    0,  620,  620,  621,  618,
      622,  622,  621,  623,  623,  635,    0,  621,  621,  622,
        0,    0,  623,  622,    0,  635,  623,    0,  622,  622,

      619,  623,  623,  620,  624,  624,  634,    0,    0,    0,
      634,  626,  626,  624,  621,    0,  634,  624,  627,  627,
      626,  635,  624,  624,  626,  622,    0,  627,  623,  626,
      626,  627,  628,  628,  629,  629,  627,  627,    0,    0,
        0,  628,  634,  629,    0,  628,    0,  629,    0,  624,
      628,  628,  629,  629,    0,    0,  626,  630,  630,    0,
        0,    0,    0,  627,    0,    0,  630,    0,  655,    0,
      630,  631,  631,  632,  632,  630,  630,  628,  655,  629,
      631,    0,  632,    0,  631,    0,  632,  633,  633,  631,
      631,  632,  632,    0,  638,  638,  633,    0,    0,    0,

      633,    0,  630,  638,  655,  633,  633,  638,  639,  639,
      640,  640,  638,  638,    0,    0,  631,  639,  632,  640,
        0,  639,    0,  640,  641,  641,  639,  639,  640,  640,
        0,  666,  633,  641,    0,    0,    0,  641,    0,  638,
        0,  666,  641,  641,    0,  642,  642,  643,  643,    0,
        0,    0,    0,  639,  642,  640,  643,    0,  642,    0,
      643,  644,  644,  642,  642,  643,  643,  666,  716,  641,
      644,    0,  645,  645,  644,  646,  646,    0,  716,  644,
      644,  645,    0,    0,  646,  645,  647,  647,  646,    0,
      642,  645,  643,    0,  646,  647,    0,  728,    0,  647,

      648,  648,  649,  649,  716,  647,  644,  728,    0,  648,
        0,  649,    0,  648,    0,  649,    0,  645,    0,  648,
      646,  649,    0,  650,  650,  651,  651,    0,  652,  652,
        0,  647,  650,  728,  651,  730,  650,  652,  651,  653,
      653,  652,  650,    0,  651,  730,    0,  652,  653,    0,
      654,  654,  653,  658,  658,  752,    0,    0,  653,  654,
        0,    0,  658,  654,    0,  752,  658,    0,  650,  654,
      651,  730,  658,  652,  659,  659,  660,  660,    0,    0,
        0,  661,  661,  659,    0,  660,    0,  659,    0,  660,
      661,  752,    0,  659,  661,  660,  662,  662,  658,    0,

      661,  663,  663,  664,  664,  662,    0,  667,  763,  662,
      663,  667,  664,    0,  663,  662,  664,  667,  763,  659,
      663,  660,  664,  665,  665,    0,  661,    0,    0,    0,
      677,    0,  665,    0,  677,    0,  665,    0,  670,  670,
      677,  662,  665,  667,  763,    0,  663,  670,  664,    0,
        0,  670,  671,  671,  672,  672,    0,  670,    0,    0,
        0,  671,    0,  672,    0,  671,  677,  672,  665,  673,
      673,  671,    0,  672,    0,    0,  674,  674,  673,    0,
        0,    0,  673,  670,    0,  674,    0,    0,  673,  674,
        0,  675,  675,  676,  676,  674,    0,  671,    0,  672,

      675,    0,  676,    0,  675,    0,  676,  678,  678,    0,
      675,    0,  676,    0,  679,  679,  678,    0,    0,    0,
      678,  680,  680,  679,    0,    0,  678,  679,  681,  681,
      680,    0,    0,  679,  680,    0,  675,  681,  676,    0,
      680,  681,  682,  682,  683,  683,    0,  681,    0,  684,
      684,  682,  678,  683,    0,  682,    0,  683,  684,  679,
      685,  682,  684,  683,  685,    0,  680,    0,  684,    0,
      685,  687,  687,  681,    0,    0,    0,    0,    0,    0,
      687,    0,  688,  688,  687,    0,    0,  682,    0,  683,
      687,  688,    0,  729,  684,  688,  685,  729,  689,  689,

        0,  688,    0,  729,    0,  690,  690,  689,    0,    0,
        0,  689,  691,  691,  690,    0,  687,  689,  690,  692,
      692,  691,    0,    0,  690,  691,    0,  688,  692,  729,
        0,  691,  692,  693,  693,  694,  694,    0,  692,    0,
        0,    0,  693,  689,  694,    0,  693,    0,  694,    0,
      690,  693,  693,  694,  694,    0,    0,  691,  695,  695,
        0,    0,    0,    0,  692,    0,    0,  695,    0,    0,
        0,  695,  696,  696,  697,  697,  695,  695,  693,    0,
      694,  696,    0,  697,    0,  696,    0,  697,  698,  698,
      696,  696,  697,  697,    0,  699,  699,  698,    0,    0,

        0,  698,    0,  695,  699,    0,  698,  698,  699,  702,
      702,  703,  703,  699,  699,    0,    0,  696,  702,  697,
      703,    0,  702,    0,  703,  704,  704,  702,  702,  703,
      703,    0,  764,  698,  704,    0,  764,    0,  704,    0,
      699,    0,  764,  704,  704,    0,  705,  705,  706,  706,
        0,    0,    0,    0,  702,  705,  703,  706,    0,  705,
        0,  706,  707,  707,  705,  705,  706,  706,  764,    0,
      704,  707,    0,    0,    0,  707,  708,  708,    0,    0,
      707,  707,    0,  709,  709,  708,    0,    0,    0,  708,
        0,  705,  709,  706,  708,  708,  709,  710,  710,  711,

      711,  709,  709,    0,    0,    0,  710,  707,  711,    0,
      710,    0,  711,  712,  712,  710,  710,  711,  711,    0,
        0,  708,  712,    0,    0,    0,  712,    0,  709,    0,
        0,  712,  712,    0,  713,  713,  714,  714,    0,    0,
        0,    0,  710,  713,  711,  714,    0,  713,    0,  714,
      715,  715,  713,  713,  714,  714,    0,    0,  712,  715,
        0,    0,    0,  715,  719,  719,    0,    0,  715,  715,
        0,  720,  720,  719,    0,    0,    0,  719,    0,  713,
      720,  714,  719,  719,  720,  721,  721,  722,  722,  720,
      720,    0,    0,    0,  721,  715,  722,    0,  721,    0,

      722,  723,  723,  721,  721,  722,  722,    0,    0,  719,
      723,    0,    0,    0,  723,    0,  720,    0,    0,  723,
      723,    0,  724,  724,  725,  725,    0,    0,    0,    0,
      721,  724,  722,  725,    0,  724,    0,  725,  726,  726,
      724,  724,  725,  725,    0,    0,  723,  726,    0,  733,
      733,  726,  727,  727,    0,    0,  726,  726,  733,    0,
        0,  727,  733,  734,  734,  727,    0,  724,  733,  725,
      727,  727,  734,    0,    0,    0,  734,  735,  735,  736,
      736,    0,  734,  726,    0,    0,  735,    0,  736,    0,
      735,    0,  736,    0,  733,    0,  735,  727,  736,    0,

      737,  737,  738,  738,    0,    0,    0,    0,  734,  737,
        0,  738,    0,  737,    0,  738,  740,  740,    0,  737,
        0,  738,  735,    0,  736,  740,    0,  741,  741,  740,
      742,  742,  743,  743,    0,  740,  741,    0,    0,  742,
      741,  743,    0,  742,    0,  743,  741,  744,  744,  742,
        0,  743,    0,    0,  745,  745,  744,    0,    0,    0,
      744,  740,    0,  745,    0,    0,  744,  745,    0,  746,
      746,    0,  741,  745,    0,  742,    0,  743,  746,    0,
      747,  747,  746,    0,    0,  748,  748,    0,  746,  747,
        0,    0,  744,  747,  748,    0,  749,  749,  748,  747,

        0,  750,  750,    0,  748,  749,    0,    0,    0,  749,
      750,    0,    0,    0,  750,  749,    0,    0,  751,  751,
      750,    0,    0,  755,  755,  747,    0,  751,    0,    0,
      748,  751,  755,    0,  756,  756,  755,  751,    0,  757,
      757,  749,  755,  756,    0,    0,    0,  756,  757,    0,
      758,  758,  757,  756,    0,    0,    0,    0,  757,  758,
        0,  759,  759,  758,  760,  760,    0,    0,  755,  758,
      759,    0,    0,  760,  759,    0,    0,  760,    0,  756,
      759,  761,  761,  760,  757,    0,    0,    0,  762,  762,
      761,    0,    0,    0,  761,  758,    0,  762,    0,    0,

      761,  762,  767,  767,  768,  768,  759,  762,    0,  760,
        0,  767,    0,  768,    0,  767,    0,  768,  769,  769,
      767,  767,  768,  768,    0,    0,  761,  769,    0,    0,
        0,  769,    0,  762,    0,    0,  769,  769,    0,  770,
      770,  771,  771,    0,    0,    0,    0,  767,  770,  768,
      771,    0,  770,    0,  771,  772,  772,  770,  770,  771,
      771,    0,    0,  769,  772,    0,    0,    0,  772,  773,
      773,    0,    0,  772,  772,    0,  774,  774,  773,    0,
        0,    0,  773,    0,  770,  774,  771,  773,  773,  774,
      777,  777,  778,  778,  774,  774,    0,    0,    0,  777,

      772,  778,    0,  777,    0,  778,  779,  779,  777,  777,
      778,  778,    0,    0,  773,  779,    0,  780,  780,  779,
        0,  774,    0,    0,    0,  779,  780,    0,    0,    0,
      780,  781,  781,  782,  782,  777,  780,  778,    0,    0,
      781,    0,  782,    0,  781,    0,  782,  783,  783,    0,
      781,  779,  782,    0,  784,  784,  783,    0,    0,    0,
      783,    0,  780,  784,    0,    0,  783,  784,  785,  785,
      787,  787,    0,  784,    0,    0,  781,  785,  782,  787,
        0,  785,    0,  787,  788,  788,    0,  785,    0,  787,
        0,    0,  783,  788,    0,  789,  789,  788,  790,  790,

        0,    0,    0,  788,  789,    0,    0,  790,  789,    0,
        0,  790,    0,  789,  789,  787,    0,  790,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  788,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      789,    0,    0,  790,  792,  792,  792,  792,  792,  792,
      792,  792,  792,  792,  793,  793,  793,  793,    0,  793,
      793,  793,  793,  793,  794,  794,    0,  794,  794,  795,
      795,    0,    0,  795,  795,  795,  795,  795,  796,  796,
        0,  796,  796,  797,  797,    0,    0,  797,  797,    0,
      797,  797,  798,  798,  798,  798,    0,    0,    0,  798,

      799,  799,  799,  799,    0,    0,    0,  799,  800,  800,
      800,  800,  800,  800,  800,  800,  800,  800,  801,  801,
        0,  801,  801,  801,  801,  801,  801,  801,  802,  802,
      803,  803,  803,  804,  804,  804,  804,  804,  804,  804,
      804,  804,  804,  805,  805,  805,  805,  805,  805,  805,
      805,  805,  805,  806,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  807,  807,  807,  807,  807,  807,  807,
      807,  807,  807,  808,  808,  808,  808,  808,  808,  808,
      808,  808,  808,  809,  809,  810,  810,  810,  810,  810,
      810,  810,  810,  810,  810,  811,  811,  811,  811,  811,

      811,  811,  811,  811,  811,  812,  812,  812,  812,  812,
      812,  812,  812,  812,  812,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  815,  815,  815,  815,  815,
      815,  815,  815,  815,  815,  816,  816,  816,  816,  816,
      816,  816,  816,  816,  816,  817,  817,  817,  817,  817,
      817,  817,  817,  817,  817,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  819,  820,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  821,  821,  821,  821,  821,

      821,  821,  821,  821,  821,  822,  822,  822,  822,  822,
      822,  822,  822,  822,  822,  823,  823,  823,  823,  823,
      823,  823,  823,  823,  823,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  826,  826,  826,  826,  826,
      826,  826,  826,  826,  826,  827,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  831,  831,  831,  831,  831,

      831,  831,  831,  831,  831,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  837,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  841,  841,  841,  841,  841,

      841,  841,  841,  841,  841,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  843,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  844,  844,  844,  844,  844,
      844,  844,  844,  844,  844,  845,  845,  845,  845,  845,
      845,  845,  845,  845,  845,  846,  846,  846,  846,  846,
      846,  846,  846,  846,  846,  847,  847,  847,  847,  847,
      847,  847,  847,  847,  847,  848,  848,  848,  848,  848,
      848,  848,  848,  848,  848,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  850,  850,  850,  850,  850,
      850,  850,  850,  850,  850,  851,  851,  851,  851,  851,

      851,  851,  851,  851,  851,  852,  852,  852,  852,  852,
      852,  852,  852,  852,  852,  853,  853,  853,  853,  853,
      853,  853,  853,  853,  853,  854,  854,  854,  854,  854,
      854,  854,  854,  854,  854,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  857,  857,  857,  857,  857,
      857,  857,  857,  857,  857,  858,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  859,  859,  859,  859,  859,
      859,  859,  859,  859,  859,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  861,  861,  861,  861,  861,

      861,  861,  861,  861,  861,  862,  862,  862,  862,  862,
      862,  862,  862,  862,  862,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  865,  866,  866,  866,  866,  866,
      866,  866,  866,  866,  866,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  868,  868,  868,  868,  868,
      868,  868,  868,  868,  868,  869,  869,  869,  869,  869,
      869,  869,  869,  869,  869,  870,  870,  870,  870,  870,
      870,  870,  870,  870,  870,  871,  871,  871,  871,  871,

      871,  871,  871,  871,  871,  872,  872,  872,  872,  872,
      872,  872,  872,  872,  872,  873,  873,  873,  873,  873,
      873,  873,  873,  873,  873,  874,  874,  874,  874,  874,
      874,  874,  874,  874,  874,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  876,  876,  876,  876,  876,
      876,  876,  876,  876,  876,  877,  877,  877,  877,  877,
      877,  877,  877,  877,  877,  878,  878,  878,  878,  878,
      878,  878,  878,  878,  878,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  880,  880,  880,  880,  880,
      880,  880,  880,  880,  880,  881,  881,  881,  881,  881,

      881,  881,  881,  881,  881,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  885,  885,  885,  885,  885,
      885,  885,  885,  885,  885,  886,  886,  886,  886,  886,
      886,  886,  886,  886,  886,  887,  887,  887,  887,  887,
      887,  887,  887,  887,  887,  888,  888,  888,  888,  888,
      888,  888,  888,  888,  888,  889,  889,  889,  889,  889,
      889,  889,  889,  889,  889,  890,  890,  890,  890,  890,
      890,  890,  890,  890,  890,  891,  891,  891,  891,  891,

      891,  891,  891,  891,  891,  892,  892,  892,  892,  892,
      892,  892,  892,  892,  892,  893,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  894,  894,  894,  894,  894,
      894,  894,  894,  894,  894,  895,  895,  895,  895,  895,
      895,  895,  895,  895,  895,  896,  896,  896,  896,  896,
      896,  896,  896,  896,  896,  897,  897,  897,  897,  897,
      897,  897,  897,  897,  897,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  900,  900,  900,  900,  900,
      900,  900,  900,  900,  900,  901,  901,  901,  901,  901,

      901,  901,  901,  901,  901,  902,  902,  902,  902,  902,
      902,  902,  902,  902,  902,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  904,  904,  904,  904,  904,
      904,  904,  904,  904,  904,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  907,  907,  907,  907,  907,
      907,  907,  907,  907,  907,  908,  908,  908,  908,  908,
      908,  908,  908,  908,  908,  909,  909,  909,  909,  909,
      909,  909,  909,  909,  909,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  911,  911,  911,  911,  911,

      911,  911,  911,  911,  911,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  913,  913,  913,  913,  913,
      913,  913,  913,  913,  913,  914,  914,  914,  914,  914,
      914,  914,  914,  914,  914,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  916,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  917,  917,  917,  917,  917,
      917,  917,  917,  917,  917,  918,  918,  918,  918,  918,
      918,  918,  918,  918,  918,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  921,  921,  921,  921,  921,

      921,  921,  921,  921,  921,  922,  922,  922,  922,  922,
      922,  922,  922,  922,  922,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  924,  924,  924,  924,  924,
      924,  924,  924,  924,  924,  925,  925,  925,  925,  925,
      925,  925,  925,  925,  925,  926,  926,  926,  926,  926,
      926,  926,  926,  926,  926,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  928,  928,  928,  928,  928,
      928,  928,  928,  928,  928,  929,  929,  929,  929,  929,
      929,  929,  929,  929,  929,  930,  930,  930,  930,  930,
      930,  930,  930,  930,  930,  931,  931,  931,  931,  931,

      931,  931,  931,  931,  931,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  933,  933,  933,  933,  933,
      933,  933,  933,  933,  933,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  935,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  936,  937,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  939,  939,  939,  939,  939,
      939,  939,  939,  939,  939,  940,  940,  940,  940,  940,
      940,  940,  940,  940,  940,  941,  941,  941,  941,  941,

      941,  941,  941,  941,  941,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  943,  943,  943,  943,  943,
      943,  943,  943,  943,  943,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  946,  946,  946,  946,  946,
      946,  946,  946,  946,  946,  947,  947,  947,  947,  947,
      947,  947,  947,  947,  947,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  950,  950,  950,  950,  950,
      950,  950,  950,  950,  950,  951,  951,  951,  951,  951,

      951,  951,  951,  951,  951,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  953,  953,  953,  953,  953,
      953,  953,  953,  953,  953,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  956,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  957,  957,  957,  957,  957,
      957,  957,  957,  957,  957,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  791,  791
    } ;

static yyconst flex_int16_t yy_rule_linenum[25] =
    {   0,
       76,   86,   87,   89,   90,   91,   93,   94,   95,   97,
       98,   99,  100,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ctok.l"
/*
 * ctok.l - a lex rule for C
 * 
 * Copyright (C) 2004-2005 Akira Tanaka <akr@m17n.org> 
 *     All rights reserved.
 *     This is free software with ABSOLUTELY NO WARRANTY.
 * 
 * You can redistribute it and/or modify it under the terms of 
 * the GNU General Public License version 2.
 */




#line 41 "ctok.l"

#include "c.h"

#define YY_EXTRA_TYPE langscan_c_lex_extra_t *

#if YY_NULL != 0
#error "YY_NULL is not 0."
#endif

#define YY_DECL langscan_c_token_t langscan_c_lex_lex(yyscan_t yyscanner)

#define YY_INPUT(buf,result,max_size) \
  if (!yyextra->eof) { \
    result = yyextra->user_read(&(yyextra->user_data), (buf), (max_size)); \
    if (result == 0) \
      yyextra->eof = 1; \
  }

#define UPD update_pos(yyextra, yytext, yyleng)
static void update_pos(langscan_c_lex_extra_t *, char *, int);

#define report(token) \
  do { \
    yyextra->text = yytext; \
    yyextra->leng = yyleng; \
    return langscan_c_##token; \
  } while (0)

#define matched_is(str) (yyleng == sizeof(str)-1 && strncmp(str, yytext, sizeof(str)-1) == 0)

static int ident_length(unsigned char *ptr, int max);

#line 2177 "ctok.c"

#define INITIAL 0
#define PREPROC 1
#define CLASSHEAD 2
#define CLASSHEAD_TRAILER 3
#define CLASSDECL 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* %if-reentrant */

/* %endif */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int langscan_c_lex_lex_destroy (yyscan_t yyscanner );

int langscan_c_lex_get_debug (yyscan_t yyscanner );

void langscan_c_lex_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE langscan_c_lex_get_extra (yyscan_t yyscanner );

void langscan_c_lex_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *langscan_c_lex_get_in (yyscan_t yyscanner );

void langscan_c_lex_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *langscan_c_lex_get_out (yyscan_t yyscanner );

void langscan_c_lex_set_out  (FILE * out_str ,yyscan_t yyscanner );

int langscan_c_lex_get_leng (yyscan_t yyscanner );

char *langscan_c_lex_get_text (yyscan_t yyscanner );

int langscan_c_lex_get_lineno (yyscan_t yyscanner );

void langscan_c_lex_set_lineno (int line_number ,yyscan_t yyscanner );

/* %if-bison-bridge */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int langscan_c_lex_wrap (yyscan_t yyscanner );
#else
extern int langscan_c_lex_wrap (yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int langscan_c_lex_lex (yyscan_t yyscanner);

#define YY_DECL int langscan_c_lex_lex (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [7.0] user's declarations go here */
#line 75 "ctok.l"

#line 2460 "ctok.c"

	if ( yyg->yy_init )
		{
		yyg->yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			langscan_c_lex_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				langscan_c_lex__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		langscan_c_lex__load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 792 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 5966 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 25 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 25 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 26 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "ctok.l"
{ UPD;
    if (YY_START == INITIAL || yyleng == 1) {
      BEGIN(PREPROC);
      report(preproc_beg);
    }
    else {
      yyless(yyleng-1);
      report(space);
    }
  }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 86 "ctok.l"
{ UPD; report(space); }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 87 "ctok.l"
{ UPD; BEGIN(INITIAL); report(preproc_end); }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 89 "ctok.l"
{ yyless(ident_length(yytext, yyleng)); UPD; BEGIN(CLASSHEAD_TRAILER); report(classdef); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 90 "ctok.l"
{ UPD; report(classref); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 91 "ctok.l"
{ UPD; BEGIN(INITIAL); report(punct); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 93 "ctok.l"
{ yyless(ident_length(yytext, yyleng)); UPD; report(classdecl); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 94 "ctok.l"
{ UPD; report(classref); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 95 "ctok.l"
{ UPD; BEGIN(INITIAL); report(punct); }
	YY_BREAK
case 10:
/* rule 10 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 97 "ctok.l"
{ UPD; BEGIN(CLASSHEAD); report(ident); }
	YY_BREAK
case 11:
/* rule 11 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 98 "ctok.l"
{ UPD; BEGIN(CLASSHEAD); report(ident); }
	YY_BREAK
case 12:
/* rule 12 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 99 "ctok.l"
{ UPD; BEGIN(CLASSDECL); report(ident); }
	YY_BREAK
case 13:
/* rule 13 can match eol */
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 100 "ctok.l"
{ UPD; BEGIN(CLASSDECL); report(ident); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 102 "ctok.l"
{ UPD; report(space); }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 103 "ctok.l"
{ UPD; report(space); }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 104 "ctok.l"
{ UPD; report(comment); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 105 "ctok.l"
{ UPD; report(string); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 106 "ctok.l"
{ UPD; report(character); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 107 "ctok.l"
{ UPD; report(integer); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 108 "ctok.l"
{ UPD; report(integer); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 109 "ctok.l"
{ UPD; report(integer); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 110 "ctok.l"
{ UPD; report(floating); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 111 "ctok.l"
{ UPD; report(ident); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 112 "ctok.l"
{ UPD; report(punct); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 114 "ctok.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2733 "ctok.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PREPROC):
case YY_STATE_EOF(CLASSHEAD):
case YY_STATE_EOF(CLASSHEAD_TRAILER):
case YY_STATE_EOF(CLASSDECL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * langscan_c_lex_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( langscan_c_lex_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of langscan_c_lex_lex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					langscan_c_lex_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			langscan_c_lex_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 792 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 792 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 791);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					langscan_c_lex_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( langscan_c_lex_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void langscan_c_lex_restart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        langscan_c_lex_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            langscan_c_lex__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	langscan_c_lex__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	langscan_c_lex__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void langscan_c_lex__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		langscan_c_lex_pop_buffer_state();
	 *		langscan_c_lex_push_buffer_state(new_buffer);
     */
	langscan_c_lex_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	langscan_c_lex__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (langscan_c_lex_wrap()) processing, but the only time this flag
	 * is looked at is after langscan_c_lex_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void langscan_c_lex__load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE langscan_c_lex__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) langscan_c_lex_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in langscan_c_lex__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) langscan_c_lex_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in langscan_c_lex__create_buffer()" );

	b->yy_is_our_buffer = 1;

	langscan_c_lex__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with langscan_c_lex__create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void langscan_c_lex__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		langscan_c_lex_free((void *) b->yy_ch_buf ,yyscanner );

	langscan_c_lex_free((void *) b ,yyscanner );
}

/* %if-c-only */

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a langscan_c_lex_restart() or at EOF.
 */
/* %if-c-only */
    static void langscan_c_lex__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	langscan_c_lex__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then langscan_c_lex__init_buffer was _probably_
     * called from langscan_c_lex_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void langscan_c_lex__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		langscan_c_lex__load_buffer_state(yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void langscan_c_lex_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	langscan_c_lex_ensure_buffer_stack(yyscanner);

	/* This block is copied from langscan_c_lex__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from langscan_c_lex__switch_to_buffer. */
	langscan_c_lex__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void langscan_c_lex_pop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	langscan_c_lex__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		langscan_c_lex__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void langscan_c_lex_ensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)langscan_c_lex_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)langscan_c_lex_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE langscan_c_lex__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) langscan_c_lex_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in langscan_c_lex__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	langscan_c_lex__switch_to_buffer(b ,yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to langscan_c_lex_lex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       langscan_c_lex__scan_bytes() instead.
 */
YY_BUFFER_STATE langscan_c_lex__scan_string (yyconst char * yy_str , yyscan_t yyscanner)
{
    
	return langscan_c_lex__scan_bytes(yy_str,strlen(yy_str) ,yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to langscan_c_lex_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE langscan_c_lex__scan_bytes  (yyconst char * bytes, int  len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) langscan_c_lex_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in langscan_c_lex__scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = langscan_c_lex__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in langscan_c_lex__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE langscan_c_lex_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int langscan_c_lex_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int langscan_c_lex_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *langscan_c_lex_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *langscan_c_lex_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int langscan_c_lex_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *langscan_c_lex_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void langscan_c_lex_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void langscan_c_lex_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "langscan_c_lex_set_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void langscan_c_lex_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "langscan_c_lex_set_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see langscan_c_lex__switch_to_buffer
 */
void langscan_c_lex_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void langscan_c_lex_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int langscan_c_lex_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void langscan_c_lex_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */
/* %endif */

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
       This function is called once per scanner lifetime. */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 1;
    yyg->yy_start = 0;
    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack = (int *) 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * langscan_c_lex_lex_init()
     */
    return 0;
}

/* User-visible API */

/* langscan_c_lex_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int langscan_c_lex_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) langscan_c_lex_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    memset(*ptr_yy_globals,0,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* langscan_c_lex_lex_destroy is for both reentrant and non-reentrant scanners. */
int langscan_c_lex_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		langscan_c_lex__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		langscan_c_lex_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	langscan_c_lex_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        langscan_c_lex_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    langscan_c_lex_free ( yyscanner , yyscanner );
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *langscan_c_lex_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *langscan_c_lex_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void langscan_c_lex_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see langscan_c_lex_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 114 "ctok.l"



static void update_pos(
  langscan_c_lex_extra_t *extra,
  char *text,
  int leng)
{
  int i, j;
  extra->beg_byteno = extra->end_byteno;
  extra->beg_lineno = extra->end_lineno;
  extra->beg_columnno = extra->end_columnno;
  j = 0;
  for (i = 0; i < leng; i++) {
    if (text[i] == '\n') {
      extra->end_lineno++;
      j = i + 1;
      extra->end_columnno = 0;
    }
  }
  extra->end_columnno += leng - j;
  extra->end_byteno += leng;
}

static int ident_length(unsigned char *ptr, int max)
{
  int len = 0;
  while (0 < max &&
         (('0' <= *ptr && *ptr <= '9') ||
          ('A' <= *ptr && *ptr <= 'Z') ||
          ('a' <= *ptr && *ptr <= 'z') ||
          *ptr == '_')) {
    ptr++;
    len++;
    max--;
  }
  return len;
}

langscan_c_tokenizer_t *langscan_c_make_tokenizer(
  size_t (*user_read)(void **user_data_p, char *buf, size_t maxlen),
  void *user_data)
{
  langscan_c_tokenizer_t *tokenizer;
  langscan_c_lex_extra_t *extra;
  tokenizer = (langscan_c_tokenizer_t *)malloc(sizeof(langscan_c_tokenizer_t));
  if (tokenizer == NULL)
    return NULL;
  extra = (langscan_c_lex_extra_t *)malloc(sizeof(langscan_c_lex_extra_t));
  if (extra == NULL)
    return NULL;
  extra->user_read = user_read;
  extra->user_data = user_data;
  extra->beg_lineno = 1;
  extra->beg_columnno = 0;
  extra->beg_byteno = 0;
  extra->end_lineno = 1;
  extra->end_columnno = 0;
  extra->end_byteno = 0;
  extra->eof = 0;
  tokenizer->extra = extra;
  langscan_c_lex_lex_init(&tokenizer->scanner);
  langscan_c_lex_set_extra(extra, tokenizer->scanner);
  return tokenizer;
}

langscan_c_token_t langscan_c_get_token(langscan_c_tokenizer_t *tokenizer) 
{
  return langscan_c_lex_lex(tokenizer->scanner);
}

void langscan_c_free_tokenizer(langscan_c_tokenizer_t *tokenizer) 
{
  langscan_c_lex_extra_t *extra = langscan_c_lex_get_extra(tokenizer->scanner);
  free((void *)extra);
  langscan_c_lex_lex_destroy(tokenizer->scanner);
  free((void *)tokenizer);
}

user_read_t langscan_c_tokenizer_get_user_read(langscan_c_tokenizer_t *tokenizer)
{
  return tokenizer->extra->user_read;
}

void *langscan_c_tokenizer_get_user_data(langscan_c_tokenizer_t *tokenizer)
{
  return tokenizer->extra->user_data;
}

const char *langscan_c_token_name(langscan_c_token_t token)
{
  static char *token_names[] = {
    "*eof*",
#define LANGSCAN_C_TOKEN(name) #name,
    LANGSCAN_C_TOKEN_LIST
#undef LANGSCAN_C_TOKEN
  };

  return token_names[token];
}

